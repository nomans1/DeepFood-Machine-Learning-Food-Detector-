{
  "_args": [
    [
      {
        "raw": "react-native-view-shot@2.5.0",
        "scope": null,
        "escapedName": "react-native-view-shot",
        "name": "react-native-view-shot",
        "rawSpec": "2.5.0",
        "spec": "2.5.0",
        "type": "version"
      },
      "/GCD/Year 4/SDP/RN/MLFoodApp/node_modules/expo"
    ]
  ],
  "_from": "react-native-view-shot@2.5.0",
  "_hasShrinkwrap": false,
  "_id": "react-native-view-shot@2.5.0",
  "_location": "/react-native-view-shot",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-native-view-shot_2.5.0_1540472213788_0.3314518311911132"
  },
  "_npmUser": {
    "name": "gre",
    "email": "renaudeau.gaetan@gmail.com"
  },
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-view-shot@2.5.0",
    "scope": null,
    "escapedName": "react-native-view-shot",
    "name": "react-native-view-shot",
    "rawSpec": "2.5.0",
    "spec": "2.5.0",
    "type": "version"
  },
  "_requiredBy": [
    "/expo"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-view-shot/-/react-native-view-shot-2.5.0.tgz",
  "_shasum": "428a997f470d3148d0067c5b46abd988ef1aa4c0",
  "_shrinkwrap": null,
  "_spec": "react-native-view-shot@2.5.0",
  "_where": "/GCD/Year 4/SDP/RN/MLFoodApp/node_modules/expo",
  "author": {
    "name": "Gaëtan Renaudeau",
    "email": "renaudeau.gaetan@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/gre/react-native-view-shot/issues"
  },
  "dependencies": {},
  "description": "Capture a React Native view to an image",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "428a997f470d3148d0067c5b46abd988ef1aa4c0",
    "integrity": "sha512-xFJA+N7wh8Ik/17I4QB24e0a0L3atg1ScVehvtYR5UBTgHdzTFA0ZylvXp9gkZt7V+AT5Pni0H3NQItpqSKFoQ==",
    "tarball": "https://registry.npmjs.org/react-native-view-shot/-/react-native-view-shot-2.5.0.tgz",
    "fileCount": 49,
    "unpackedSize": 116652,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb0b2WCRA9TVsSAnZWagAATW4P/3yJ77Mdb7kdv9GiffYb\n5R1yOmG7n+a8cNve52qyerPeHaA3KxM4pByAa7usTX1yBNPwYen9oQxCtIRp\n7aIXY2ZrvI6lH2VCTW9si/ZqWtk+r9dbWqnFwiGxM7AiyRMEjo1Z+hOeTuzU\n1hfA3vgTLeO+8cUnMC1DPQZYNwC8Z5tnnxEDlb5jcqo7mOJdtHKAhablSZfM\n8+ZU5hZoHEGVAyDdvg+OPhLAM26d0LrKQeQ9qrO8i/octQ3VmJRpUcSHHYhM\nBv+kEHjGQD+Ei2KMWwTLIBekKei6rjQEaIUKr4TiBmteUCSNaNICeLGO7BV7\nPdsK6oQGs73/R72NqPvsXT6hkju2i8l9xh8FCLojKz4Z7tgjrQRvoiFFOgpT\nsJkW6CihNWXoNVJ/yeCgXWp6E8vqmDwObHDZibD8K8KaYbqPOVZJ4/l9BJ5w\nSFQsLNIxJykhRxjxKzLEXJeyQpb1r4P47+tHT2WV/YHtBAuA1aB+H8cm/zGo\nx1XIU4ckKVXmTZaiuclNMnQfWCV3EiHsbTy74TrKV3URHpybA1r819CC1CD7\nnpcn4AsEUwS3Lnqul27Aq/XdBzi2X7jy+leGZlLhWCPTCg/px4C9KFoYVNt6\nipS5jPebP/LZiV+Fj0FgCOcDnCxenJEFqDLLxzgEZEF+aarfwlU0Pe42YXdM\nFe0L\r\n=dQfn\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "homepage": "https://github.com/gre/react-native-view-shot#readme",
  "keywords": [
    "react-native",
    "screenshot",
    "viewshot",
    "view-snapshot",
    "snapshot",
    "rasterize"
  ],
  "license": "MIT",
  "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 Gaëtan Renaudeau\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "gre",
      "email": "renaudeau.gaetan@gmail.com"
    }
  ],
  "name": "react-native-view-shot",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "*",
    "react-native": "*"
  },
  "readme": "\n# react-native-view-shot ![](https://img.shields.io/npm/v/react-native-view-shot.svg) ![](https://img.shields.io/badge/react--native-%2040+-05F561.svg)\n\nCapture a React Native view to an image.\n\n<img src=\"./example/docs/recursive.gif\" width=300 />\n\n## Install\n\n```bash\nyarn add react-native-view-shot\nreact-native link react-native-view-shot\n```\n\nMake sure react-native-view-shot is correctly linked in XCode (might require a manual installation, refer to [React Native doc](https://facebook.github.io/react-native/docs/linking-libraries-ios.html)).\n\n## Recommended High Level API\n\n```js\nimport ViewShot from \"react-native-view-shot\";\n\nclass ExampleCaptureOnMountManually extends Component {\n  componentDidMount () {\n    this.refs.viewShot.capture().then(uri => {\n      console.log(\"do something with \", uri);\n    });\n  }\n  render() {\n    return (\n      <ViewShot ref=\"viewShot\" options={{ format: \"jpg\", quality: 0.9 }}>\n        <Text>...Something to rasterize...</Text>\n      </ViewShot>\n    );\n  }\n}\n\n// alternative\nclass ExampleCaptureOnMountSimpler extends Component {\n  onCapture = uri => {\n    console.log(\"do something with \", uri);\n  }\n  render() {\n    return (\n      <ViewShot onCapture={this.onCapture} captureMode=\"mount\">\n        <Text>...Something to rasterize...</Text>\n      </ViewShot>\n    );\n  }\n}\n\n// waiting an image\nclass ExampleWaitingCapture extends Component {\n  onImageLoad = () => {\n    this.refs.viewShot.capture().then(uri => {\n      console.log(\"do something with \", uri);\n    })\n  };\n  render() {\n    return (\n      <ViewShot ref=\"viewShot\">\n        <Text>...Something to rasterize...</Text>\n        <Image ... onLoad={this.onImageLoad} />\n      </ViewShot>\n    );\n  }\n}\n\n// capture ScrollView content\nclass ExampleCaptureScrollViewContent extends Component {\n  onCapture = uri => {\n    console.log(\"do something with \", uri);\n  }\n  render() {\n    return (\n      <ScrollView>\n        <ViewShot onCapture={this.onCapture} captureMode=\"mount\">\n          <Text>...The Scroll View Content Goes Here...</Text>\n        </ViewShot>\n      </ScrollView>\n    );\n  }\n}\n```\n**Props:**\n\n- **`children`**: the actual content to rasterize.\n- **`options`**: the same options as in `captureRef` method.\n- **`captureMode`** (string):\n  - if not defined (default). the capture is not automatic and you need to use the ref and call `capture()` yourself.\n  - `\"mount\"`. Capture the view once at mount. (It is important to understand image loading won't be waited, in such case you want to use `\"none\"` with `viewShotRef.capture()` after `Image#onLoad`.)\n  - `\"continuous\"` EXPERIMENTAL, this will capture A LOT of images continuously. For very specific use-cases.\n  - `\"update\"` EXPERIMENTAL, this will capture images each time React redraw (on did update). For very specific use-cases.\n- **`onCapture`**: when a `captureMode` is defined, this callback will be called with the capture result.\n- **`onCaptureFailure`**: when a `captureMode` is defined, this callback will be called when a capture fails.\n\n## `captureRef(view, options)` lower level imperative API\n\n```js\nimport { captureRef } from \"react-native-view-shot\";\n\ncaptureRef(viewRef, {\n  format: \"jpg\",\n  quality: 0.8\n})\n.then(\n  uri => console.log(\"Image saved to\", uri),\n  error => console.error(\"Oops, snapshot failed\", error)\n);\n```\n\nReturns a Promise of the image URI.\n\n- **`view`** is a reference to a React Native component.\n- **`options`** may include:\n  - **`width`** / **`height`** *(number)*: the width and height of the final image (resized from the View bound. don't provide it if you want the original pixel size).\n  - **`format`** *(string)*: either `png` or `jpg` or `webm` (Android). Defaults to `png`.\n  - **`quality`** *(number)*: the quality. 0.0 - 1.0 (default). (only available on lossy formats like jpg)\n  - **`result`** *(string)*, the method you want to use to save the snapshot, one of:\n    - `\"tmpfile\"` (default): save to a temporary file *(that will only exist for as long as the app is running)*.\n    - `\"base64\"`: encode as base64 and returns the raw string. Use only with small images as this may result of lags (the string is sent over the bridge). *N.B. This is not a data uri, use `data-uri` instead*.\n    - `\"data-uri\"`: same as `base64` but also includes the [Data URI scheme](https://en.wikipedia.org/wiki/Data_URI_scheme) header.\n  - **`snapshotContentContainer`** *(bool)*: if true and when view is a ScrollView, the \"content container\" height will be evaluated instead of the container height.\n\n## `releaseCapture(uri)`\n\nThis method release a previously captured `uri`. For tmpfile it will clean them out, for other result types it just won't do anything.\n\nNB: the tmpfile captures are automatically cleaned out after the app closes, so you might not have to worry about this unless advanced usecases. The `ViewShot` component will use it each time you capture more than once (useful for continuous capture to not leak files).\n\n## `captureScreen()` Android and iOS Only\n\n```js\nimport { captureScreen } from \"react-native-view-shot\";\n\ncaptureScreen({\n  format: \"jpg\",\n  quality: 0.8\n})\n.then(\n  uri => console.log(\"Image saved to\", uri),\n  error => console.error(\"Oops, snapshot failed\", error)\n);\n```\n\nThis method will capture the contents of the currently displayed screen as a native hardware screenshot. It does not require a ref input, as it does not work at the view level. This means that ScrollViews will not be captured in their entirety - only the portions currently visible to the user. \n\nReturns a Promise of the image URI.\n\n- **`options`**: the same options as in `captureRef` method.\n\n### Advanced Examples\n\n[Checkout react-native-view-shot-example](example)\n\n## Interoperability Table\n\n> Snapshots are not guaranteed to be pixel perfect. It also depends on the platform. Here is some difference we have noticed and how to workaround.\n\nModel tested: iPhone 6 (iOS), Nexus 5 (Android).\n\n| System             | iOS                | Android           | Windows           |\n|--------------------|--------------------|-------------------|-------------------|\n| View,Text,Image,.. | YES                | YES               | YES               |                    \n| WebView            | YES                | YES<sup>1</sup>   | YES               |\n| gl-react v2        | YES                | NO<sup>2</sup>    | NO<sup>3</sup>    |\n| react-native-video | NO                 | NO                | NO                |\n| react-native-maps  | YES                | NO<sup>4</sup>    | NO<sup>3</sup>    |\n| react-native-svg   | YES                | YES               | maybe?            |\n| react-native-camera   | NO                | YES               | NO <sup>3</sup>        |\n\n>\n1. Only supported by wrapping a `<View collapsable={false}>` parent and snapshotting it.\n2. It returns an empty image (not a failure Promise).\n3. Component itself lacks platform support.\n4. But you can just use the react-native-maps snapshot function: https://github.com/airbnb/react-native-maps#take-snapshot-of-map\n\n## Performance Optimization\n\nDuring profiling captured several things that influence on performance:\n1) (de-)allocation of memory for bitmap\n2) (de-)allocation of memory for Base64 output buffer\n3) compression of bitmap to different image formats: PNG, JPG\n\nTo solve that in code introduced several new approaches:\n- reusable images, that reduce load on GC;\n- reusable arrays/buffers that also reduce load on GC;\n- RAW image format for avoiding expensive compression;\n- ZIP deflate compression for RAW data, that works faster in compare to `Bitmap.compress`\n\nmore details and code snippet are below.\n\n### RAW Images\n\nIntroduced a new image format RAW. it correspond a ARGB array of pixels.\n\nAdvantages:\n- no compression, so its supper quick. Screenshot taking is less than 16ms;\n\nRAW format supported for `zip-base64`, `base64` and `tmpfile` result types.\n\nRAW file on disk saved in format: `${width}:${height}|${base64}` string.\n\n### zip-base64\n\nIn compare to BASE64 result string this format fast try to apply zip/deflate compression on screenshot results\nand only after that convert results to base64 string. In combination zip-base64 + raw we got a super fast\napproach for capturing screen views and deliver them to the react side.\n\n### How to work with zip-base64 and RAW format?\n\n```js\nconst fs = require('fs')\nconst zlib = require('zlib')\nconst PNG = require('pngjs').PNG\nconst Buffer = require('buffer').Buffer\n\nconst format = Platform.OS === 'android' ? 'raw' : 'png'\nconst result = Platform.OS === 'android' ? 'zip-base64' : 'base64'\n\ncaptureRef(this.ref, { result, format }).then(data => {\n    // expected pattern 'width:height|', example: '1080:1731|'\n    const resolution = /^(\\d+):(\\d+)\\|/g.exec(data)\n    const width = (resolution || ['', 0, 0])[1]\n    const height = (resolution || ['', 0, 0])[2]\n    const base64 = data.substr((resolution || [''])[0].length || 0)\n\n    // convert from base64 to Buffer\n    const buffer = Buffer.from(base64, 'base64')\n    // un-compress data\n    const inflated = zlib.inflateSync(buffer)\n    // compose PNG\n    const png = new PNG({ width, height })\n    png.data = inflated\n    const pngData = PNG.sync.write(png)\n    // save composed PNG\n    fs.writeFileSync(output, pngData)\n})\n```\n\nKeep in mind that packaging PNG data is a CPU consuming operation as a `zlib.inflate`.\n\nHint: use `process.fork()` approach for converting raw data into PNGs.\n\n> Note: code is tested in large commercial project.\n\n> Note #2: Don't forget to add packages into your project:\n> ```js\n> yarn add pngjs\n> yarn add zlib\n> ```\n\n## Troubleshooting / FAQ\n\n### Saving to a file?\n\n- If you want to save the snapshotted image result to the CameraRoll, just use https://facebook.github.io/react-native/docs/cameraroll.html#savetocameraroll\n- If you want to save it to an arbitrary file path, use something like https://github.com/itinance/react-native-fs\n- For any more advanced needs, you can write your own (or find another) native module that would solve your use-case.\n\n### The snapshot is rejected with an error?\n\n- Support of special components like Video / GL views is not guaranteed to work. In case of failure, the `captureRef` promise gets rejected (the library won't crash).\n\n### get a black or blank result or still have an error with simple views?\n\nCheck the **Interoperability Table** above. Some special components are unfortunately not supported. If you have a View that contains one of an unsupported component, the whole snapshot might be compromised as well.\n\n### black background instead of transparency / weird border appear around texts?\n\n- It's preferable to **use a background color on the view you rasterize** to avoid transparent pixels and potential weirdness that some border appear around texts.\n\n### on Android, getting \"Trying to resolve view with tag '{tagID}' which doesn't exist\"\n\n> you need to make sure `collapsable` is set to `false` if you want to snapshot a **View**. Some content might even need to be wrapped into such `<View collapsable={false}>` to actually make them snapshotable! Otherwise that view won't reflect any UI View. ([found by @gaguirre](https://github.com/gre/react-native-view-shot/issues/7#issuecomment-245302844))\n\nAlternatively, you can use the `ViewShot` component that will have `collapsable={false}` set to solve this problem.\n\n### Getting \"The content size must not be zero or negative.\"\n\n> Make sure you don't snapshot instantly, you need to wait at least there is a first `onLayout` event, or after a timeout, otherwise the View might not be ready yet. (It should also be safe to just wait Image `onLoad` if you have one). If you still have the problem, make sure your view actually have a width and height > 0.\n\nAlternatively, you can use the `ViewShot` component that will wait the first `onLayout`.\n\n### Snapshotted image does not match my width and height but is twice/3-times bigger\n\nThis is because the snapshot image result is in real pixel size where the width/height defined in a React Native style are defined in \"point\" unit. You might want to set width and height option to force a resize. (might affect image quality)\n\n\n---\n\n## Thanks\n\n- To initial iOS work done by @jsierles in https://github.com/jsierles/react-native-view-snapshot\n- To React Native implementation of takeSnapshot in iOS by @nicklockwood\n- To Windows implementation by @ryanlntn\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gre/react-native-view-shot.git"
  },
  "types": "src/index.d.ts",
  "version": "2.5.0"
}
