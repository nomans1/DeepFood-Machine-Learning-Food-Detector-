{
  "_args": [
    [
      {
        "raw": "expo-react-native-adapter@~2.0.0",
        "scope": null,
        "escapedName": "expo-react-native-adapter",
        "name": "expo-react-native-adapter",
        "rawSpec": "~2.0.0",
        "spec": ">=2.0.0 <2.1.0",
        "type": "range"
      },
      "/GCD/Year 4/SDP/RN/MLFoodApp/node_modules/expo"
    ]
  ],
  "_from": "expo-react-native-adapter@~2.0.0",
  "_hasShrinkwrap": false,
  "_id": "expo-react-native-adapter@2.0.0",
  "_location": "/expo-react-native-adapter",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/expo-react-native-adapter_2.0.0_1546598708963_0.15343445666290179"
  },
  "_npmUser": {
    "name": "sjchmiela",
    "email": "sjchmiela@gmail.com"
  },
  "_phantomChildren": {},
  "_requested": {
    "raw": "expo-react-native-adapter@~2.0.0",
    "scope": null,
    "escapedName": "expo-react-native-adapter",
    "name": "expo-react-native-adapter",
    "rawSpec": "~2.0.0",
    "spec": ">=2.0.0 <2.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "/expo"
  ],
  "_resolved": "https://registry.npmjs.org/expo-react-native-adapter/-/expo-react-native-adapter-2.0.0.tgz",
  "_shasum": "0a8f74e7f79116b2f28eec79deab236c2ee0611f",
  "_shrinkwrap": null,
  "_spec": "expo-react-native-adapter@~2.0.0",
  "_where": "/GCD/Year 4/SDP/RN/MLFoodApp/node_modules/expo",
  "author": {
    "name": "650 Industries, Inc."
  },
  "bugs": {
    "url": "https://github.com/expo/expo/issues"
  },
  "dependencies": {
    "expo-image-loader-interface": "~2.0.0",
    "expo-permissions-interface": "~2.0.0",
    "invariant": "^2.2.4",
    "lodash.omit": "^4.5.0",
    "lodash.pick": "^4.4.0",
    "prop-types": "^15.6.1"
  },
  "description": "The adapter to use Expo universal modules with the React Native bridge",
  "devDependencies": {
    "@types/lodash.omit": "^4.5.4",
    "@types/lodash.pick": "^4.4.4",
    "babel-preset-expo": "^5.0.0",
    "expo-core": "~2.0.0",
    "expo-module-scripts": "^1.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "0a8f74e7f79116b2f28eec79deab236c2ee0611f",
    "integrity": "sha512-pRlmqqb9mPr1abgzEGnzeEWa7VI8WWqMWRnU/ySJTcOWRyX63oUobTKX/Bw1HuwGyB6+rVRqEF+IObOeo8va4w==",
    "tarball": "https://registry.npmjs.org/expo-react-native-adapter/-/expo-react-native-adapter-2.0.0.tgz",
    "fileCount": 57,
    "unpackedSize": 118493,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcLzk1CRA9TVsSAnZWagAAyAYQAKQYVXLJfk+eBmJbJ4Y2\nSps1lXwR3FDthTIL12qc7tlg4WXX4dwtTlQjFrNoYzw5RT6iOwV7GoaiOxBH\nMTOti3Uipfw2timylMc7iTwhm58TVF6HhKS95tYUEZA2qsM8vNuA6Huwy11v\nZbHFI/lR3DiqAfYoNHVtsC93DeKjhIrH+vP5UxluuvmtsOiKEeLcEgKRSnzZ\nwRzHRnMpbbz2fcIdsJYwUvdy1n48u5QzQGuMSAO7qlBku8IIAXu5RyLMdcRl\nDOxUKV9kbxVbAY34YaB6RbfU/xMTKzqiXkrDTXyx2tNTu+eHFesbFKcpegAz\npmjo3FWBmwXA8Wj2kTwgoi5KowRy1hYoFT8fJJNGbxjvu7HzgHhUMflp7zxG\neS02Z6h/o9DJdt1XabpNlq2vLPUwPSDYjCHcyFAVpvb5RZdsRaIuh/Ub3130\n1VjG/MQuuUVUPiET0DVUkcxYo2p7Cdd3MYZys3lLVQcLzfKKAZV0xr//SjCJ\n1Aw2iMYoJ1Z+v83+GiXgT7lNUOEHKJY/xPiwP9hn71oCTNhiJFhG9WPlgBaD\n+GaOkKIdnaN40zANpMQt//VZIYZgEIBR/wVh3/13S+BC2cQp6GoEZMTBgsf2\nGRWqvCdIjhF4tJoj+mFOLqBhmDjM/mDxRc+NxMq2QYLGfM8HDD/i6Qz90CVt\nnixk\r\n=orWs\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "f15abc53c111bd0438cd36dc456c59cfa7c56a58",
  "homepage": "https://github.com/expo/expo/tree/master/packages/expo-react-native-adapter",
  "jest": {
    "preset": "expo-module-scripts"
  },
  "keywords": [
    "react-native",
    "expo",
    "adapter"
  ],
  "license": "MIT",
  "main": "build/index.js",
  "maintainers": [
    {
      "name": "barthec",
      "email": "bartlomiejbukowski.b@gmail.com"
    },
    {
      "name": "brentvatne",
      "email": "brentvatne@gmail.com"
    },
    {
      "name": "ccheever",
      "email": "ccheever@gmail.com"
    },
    {
      "name": "dsokal",
      "email": "dominiksokal@gmail.com"
    },
    {
      "name": "esamelson",
      "email": "eric@expo.io"
    },
    {
      "name": "evanbacon",
      "email": "baconbrix@gmail.com"
    },
    {
      "name": "expoadmin",
      "email": "support@expo.io"
    },
    {
      "name": "exponent",
      "email": "exponent.team@gmail.com"
    },
    {
      "name": "fson",
      "email": "ville.immonen@iki.fi"
    },
    {
      "name": "ide",
      "email": "ide+npm@jameside.com"
    },
    {
      "name": "jakubste",
      "email": "jakub.ste@gmail.com"
    },
    {
      "name": "jesseruder",
      "email": "jesseruder@gmail.com"
    },
    {
      "name": "nikki93",
      "email": "s.nikhilesh@gmail.com"
    },
    {
      "name": "quinlanj",
      "email": "quinlanjung@gmail.com"
    },
    {
      "name": "sjchmiela",
      "email": "sjchmiela@gmail.com"
    },
    {
      "name": "terribleben",
      "email": "ben@exp.host"
    },
    {
      "name": "tsapeta",
      "email": "sapeta.tomasz@gmail.com"
    }
  ],
  "name": "expo-react-native-adapter",
  "optionalDependencies": {},
  "peerDependencies": {
    "expo-font-interface": "~2.0.0",
    "react-native": "^0.57.1"
  },
  "readme": "# expo-react-native-adapter\n\nA React Native adapter for Expo Universal Modules. It requires [`expo-core`](https://github.com/expo/expo-core) to be installed and linked.\n\n**Note:** The following installation/setup instructions are only applicable to plain React Native applications, i. e. if your project is a detached Expo project and it has ExpoKit/expoview included, the installation has already been done for you.\n\n## JavaScript installation\n\n```sh\n$ yarn add expo-react-native-adapter\n\n# or\n\n$ npm install expo-react-native-adapter --save\n```\n\n## Installation\n\n### iOS (Cocoapods)\n\nIf you're using Cocoapods, add the dependency to your `Podfile`:\n\n`pod 'EXReactNativeAdapter', path: '../node_modules/expo-react-native-adapter/ios', inhibit_warnings: true`\n\nand run `pod install`.\n\n### Android\n\n1.  Append the following lines to `android/settings.gradle`:\n    ```gradle\n    include ':expo-react-native-adapter'\n    project(':expo-react-native-adapter').projectDir = new File(rootProject.projectDir, '../node_modules/expo-react-native-adapter/android')\n    ```\n2.  Insert the following lines inside the dependencies block in `android/app/build.gradle`:\n    ```gradle\n    compile project(':expo-react-native-adapter')\n    ```\n\n## Additional required setup\n\n#### iOS\n\n1. Open the `AppDelegate.m` of your application.\n2. Import `<EXCore/EXModuleRegistry.h>`, `<EXReactNativeAdapter/EXNativeModulesProxy.h>` and `<EXReactNativeAdapter/EXModuleRegistryAdapter.h>`.\n3. Make `AppDelegate` implement `RCTBridgeDelegate` protocol (`@interface AppDelegate () <RCTBridgeDelegate>`).\n4. Add a new instance variable to your `AppDelegate`:\n    ```objc\n    @interface AppDelegate () <RCTBridgeDelegate>\n\n    // add this line\n    @property (nonatomic, strong) EXModuleRegistryAdapter *moduleRegistryAdapter;\n\n    @end\n    ```\n5. In `-application:didFinishLaunchingWithOptions:` add the following at the top of the implementation:\n    ```objc\n    self.moduleRegistryAdapter = [[EXModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[EXModuleRegistryProvider alloc] init]];\n    ```\n4. Add two methods to the `AppDelegate`'s implementation:\n    ```objc\n    - (NSArray<id<RCTBridgeModule>> *)extraModulesForBridge:(RCTBridge *)bridge\n    {\n        NSArray<id<RCTBridgeModule>> *extraModules = [_moduleRegistryAdapter extraModulesForBridge:bridge andExperience:nil];\n        // If you'd like to export some custom RCTBridgeModules that are not Expo modules, add them here!\n        return extraModules;\n    }\n\n    - (NSURL *)sourceURLForBridge:(RCTBridge *)bridge {\n        return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n    }\n    ```\n5. When initializing `RCTBridge`, make the `AppDelegate` a delegate of the bridge:\n    ```objc\n    RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n    ```\n6. That's it! All in all, your `AppDelegate.m` should look similar to:\n    <details>\n        <summary>Click to expand</summary>\n        <p>\n\n    ```objc\n    #import \"AppDelegate.h\"\n\n    #import <React/RCTBundleURLProvider.h>\n    #import <React/RCTRootView.h>\n\n    #import <EXCore/EXModuleRegistry.h>\n    #import <EXReactNativeAdapter/EXNativeModulesProxy.h>\n    #import <EXReactNativeAdapter/EXModuleRegistryAdapter.h>\n\n    @interface AppDelegate () <RCTBridgeDelegate>\n\n    @property (nonatomic, strong) EXModuleRegistryAdapter *moduleRegistryAdapter;\n\n    @end\n\n    @implementation AppDelegate\n\n    - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n    {\n        self.moduleRegistryAdapter = [[EXModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[EXModuleRegistryProvider alloc] init]];\n        RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n        RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR_MODULE_NAME\" initialProperties:nil];\n        rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n        self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n        UIViewController *rootViewController = [UIViewController new];\n        rootViewController.view = rootView;\n        self.window.rootViewController = rootViewController;\n        [self.window makeKeyAndVisible];\n        return YES;\n    }\n\n    - (NSArray<id<RCTBridgeModule>> *)extraModulesForBridge:(RCTBridge *)bridge\n    {\n        NSArray<id<RCTBridgeModule>> *extraModules = [_moduleRegistryAdapter extraModulesForBridge:bridge andExperience:nil];\n        // If you'd like to export some custom RCTBridgeModules that are not Expo modules, add them here!\n        return extraModules;\n    }\n\n    - (NSURL *)sourceURLForBridge:(RCTBridge *)bridge {\n        return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n    }\n\n    @end\n    ```\n\n    </details>\n\n#### Android\n\n1. Open the `MainApplication.java` of your application.\n2. Add to the imports:\n    ```java\n    import expo.adapters.react.ModuleRegistryAdapter;\n    import expo.adapters.react.ReactAdapterPackage;\n    import expo.adapters.react.ReactModuleRegistryProvider;\n    import expo.core.interfaces.Package;\n    ```\n3. Create an instance variable on the `Application`:\n    ```java\n    private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(Arrays.<Package>asList(\n        new ReactAdapterPackage()\n        // more packages, like\n        // new CameraPackage(), if you use expo-camera\n        // etc.\n    ));\n    ```\n4. Add `new ModuleRegistryAdapter(mModuleRegistryProvider)` to the list returned by `protected List<ReactPackage> getPackages()`.\n5. You're good to go!\n\n## Usage\n\n### Calling methods on native modules\n\nNative modules are available behind the proxy (`NativeModulesProxy` of `expo-core`).\n\nTo call an exported method, use `NativeModulesProxy[clientCodeName].exportedMethod(...arguments)`, like this:\n\n```js\n// For EX_REGISTER_MODULE(FileSystem,) or EX_REGISTER_EXPORTED_MODULE(FileSystem)\n// and EX_EXPORT_METHOD_AS(getInfo, getInfo:(NSString *)path)\n\n// or for method\n// @ExpoMethod\n// public void getInfo(String path, Promise promise)\n// defined in native module with name FileSystem\n\nimport { NativeModulesProxy } from 'expo-core';\n\nconst { FileSystem } = NativeModulesProxy;\n\nFileSystem.getInfo(\"file:///...\");\n```\n\nNote that all the methods return `Promise`s.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/expo/expo.git"
  },
  "scripts": {
    "build": "expo-module build",
    "clean": "expo-module clean",
    "expo-module": "expo-module",
    "prepare": "expo-module prepare",
    "prepublishOnly": "expo-module prepublishOnly",
    "test": "expo-module test"
  },
  "types": "build/index.d.ts",
  "version": "2.0.0"
}
