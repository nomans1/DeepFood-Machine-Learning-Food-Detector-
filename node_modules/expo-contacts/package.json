{
  "_args": [
    [
      {
        "raw": "expo-contacts@~2.0.0",
        "scope": null,
        "escapedName": "expo-contacts",
        "name": "expo-contacts",
        "rawSpec": "~2.0.0",
        "spec": ">=2.0.0 <2.1.0",
        "type": "range"
      },
      "/GCD/Year 4/SDP/RN/MLFoodApp/node_modules/expo"
    ]
  ],
  "_from": "expo-contacts@~2.0.0",
  "_hasShrinkwrap": false,
  "_id": "expo-contacts@2.0.0",
  "_location": "/expo-contacts",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/expo-contacts_2.0.0_1546598362935_0.6959041029653878"
  },
  "_npmUser": {
    "name": "sjchmiela",
    "email": "sjchmiela@gmail.com"
  },
  "_phantomChildren": {},
  "_requested": {
    "raw": "expo-contacts@~2.0.0",
    "scope": null,
    "escapedName": "expo-contacts",
    "name": "expo-contacts",
    "rawSpec": "~2.0.0",
    "spec": ">=2.0.0 <2.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "/expo"
  ],
  "_resolved": "https://registry.npmjs.org/expo-contacts/-/expo-contacts-2.0.0.tgz",
  "_shasum": "ea71d0b3734c33515a3e2ae8d7afa037ce7f3738",
  "_shrinkwrap": null,
  "_spec": "expo-contacts@~2.0.0",
  "_where": "/GCD/Year 4/SDP/RN/MLFoodApp/node_modules/expo",
  "author": {
    "name": "650 Industries, Inc."
  },
  "dependencies": {
    "expo-core": "~2.0.0",
    "expo-errors": "~1.0.0",
    "uuid-js": "^0.7.5"
  },
  "description": "Expo Contacts universal module",
  "devDependencies": {
    "flow-bin": "^0.77.0"
  },
  "directories": {},
  "dist": {
    "shasum": "ea71d0b3734c33515a3e2ae8d7afa037ce7f3738",
    "integrity": "sha512-aRq8WZ9XeTffI8vidS2Yu51WqIRsj+oWt2kaFPCnGHeH71eE6HxuNapQGe+RmoyJmpntVHYdlg3kAgyW84odQw==",
    "tarball": "https://registry.npmjs.org/expo-contacts/-/expo-contacts-2.0.0.tgz",
    "fileCount": 32,
    "unpackedSize": 216607,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcLzfbCRA9TVsSAnZWagAAiFMP/1sF8gzqCJa23c0Yw2UP\n950xsOgWe+GHepOiEET0wQx1vWESn3AZrxG5LZczrO++V/Qc9rnYCAJrDeX7\nRJiN3CQCIXS1u1pHzjq/MxAc+ahfHBSPFN9HXEmrahFA3nPFkseEpTkDfQaa\n2Ptpbpow9zKU/fvOUIF8saM8CcULVQbNk8ecLQ2ghYFBcJy9kdR/XUqkF1VB\n3r5b7b4GzL61Z5ifA+7EjrOWyV3QVaPQQTaW5X/pKfySw2qUM9EIrGedZmnN\n4Vw8waARQSiPYIv1rMGc2HonJk2/e3HQuqFEaKlg1rBEZm76YcKzO5QKdRrx\n+jKQyggef+IMxdos9rDKBurChR98Ady3AKAd65598F5K6iE9/F7V8+XSqWfT\nIR+AvKD8ktOe9akr9sibN6LMWAjxFF/XFG5FflW1QRly49G7fE2l3NP6jYla\nBdxTw245OlGM2ivisT8T2soU1NMteqazt1kZ3v7hTWKFyu29xjd6o6715v0Y\nvoPWYJSc9eJOxPMhhAj+kUh2GUdbZUSKIV7Ee1xuCT2DnmNOLWenAJuIkRLH\nwoV69x59mvPbxlIZbahiIqRlsFySGMGgH+28hOL9c+94qBMCGUu0u62WsceV\nrOBdQ8A1cffc7I4SUukgio76XDPLcLKeUSVJBcdpSIcu+J/QhhhLTo7FGJab\nMQu6\r\n=r/Qq\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "f15abc53c111bd0438cd36dc456c59cfa7c56a58",
  "homepage": "https://docs.expo.io/",
  "keywords": [
    "react-native",
    "expo",
    "contacts"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "barthec",
      "email": "bartlomiejbukowski.b@gmail.com"
    },
    {
      "name": "brentvatne",
      "email": "brentvatne@gmail.com"
    },
    {
      "name": "ccheever",
      "email": "ccheever@gmail.com"
    },
    {
      "name": "dsokal",
      "email": "dominiksokal@gmail.com"
    },
    {
      "name": "esamelson",
      "email": "eric@expo.io"
    },
    {
      "name": "evanbacon",
      "email": "baconbrix@gmail.com"
    },
    {
      "name": "expoadmin",
      "email": "support@expo.io"
    },
    {
      "name": "exponent",
      "email": "exponent.team@gmail.com"
    },
    {
      "name": "fson",
      "email": "ville.immonen@iki.fi"
    },
    {
      "name": "ide",
      "email": "ide+npm@jameside.com"
    },
    {
      "name": "jakubste",
      "email": "jakub.ste@gmail.com"
    },
    {
      "name": "jesseruder",
      "email": "jesseruder@gmail.com"
    },
    {
      "name": "nikki93",
      "email": "s.nikhilesh@gmail.com"
    },
    {
      "name": "quinlanj",
      "email": "quinlanjung@gmail.com"
    },
    {
      "name": "sjchmiela",
      "email": "sjchmiela@gmail.com"
    },
    {
      "name": "terribleben",
      "email": "ben@exp.host"
    },
    {
      "name": "tsapeta",
      "email": "sapeta.tomasz@gmail.com"
    }
  ],
  "name": "expo-contacts",
  "optionalDependencies": {},
  "readme": "# expo-contacts\n\n## Installation\n\n### iOS (Cocoapods)\n\nIf you're using Cocoapods, add the dependency to your `Podfile`:\n\n`pod 'EXContacts'`\n\nand run `pod install`.\n\n### Android\n\n1. Append the following lines to `android/settings.gradle`:\n\n   ```gradle\n   include ':expo-contacts'\n   project(':expo-contacts').projectDir = new File(rootProject.projectDir, '../node_modules/expo-contacts/android')\n   ```\n\n   and if not already included\n\n   ```gradle\n   include ':expo-permissions-interface'\n   project(':expo-permissions-interface').projectDir = new File(rootProject.projectDir, '../node_modules/expo-permissions-interface/android')\n\n      include ':expo-filesystem-interface'\n   project(':expo-filesystem-interface').projectDir = new File(rootProject.projectDir, '../node_modules/expo-filesystem-interface/android')\n   ```\n\n2. Insert the following lines inside the dependencies block in `android/app/build.gradle`:\n   ```gradle\n   compile project(':expo-contacts')\n   ```\n   and if not already included\n   ```gradle\n   compile project(':expo-permissions-interface')\n   compile project(':expo-filesystem-interface')\n   ```\n\n## Introduction\n\nProvides access to the phone's system contacts.\n\n## Methods\n\n### getContactsAsync\n\n```js\ngetContactsAsync(contactQuery: ContactQuery): Promise<ContactResponse>\n```\n\nReturn a list of contacts that fit a given criteria.\nYou can get all of the contacts by passing no criteria.\n\n**Parameters**\n\n| Name         | Type           | Description             |\n| ------------ | -------------- | ----------------------- |\n| contactQuery | `ContactQuery` | Used to query contacts. |\n\n**Returns**\n\n| Name            | Type              | Description                       |\n| --------------- | ----------------- | --------------------------------- |\n| contactResponse | `ContactResponse` | Contacts returned from the query. |\n\n**Example**\n\n```js\nconst { data } = await Contacts.getContactsAsync({\n  fields: [Contacts.Fields.Emails],\n});\n\nif (data.length > 0) {\n  const contact = data[0];\n  console.log(contact);\n}\n```\n\n### getContactByIdAsync\n\n```js\ngetContactByIdAsync(contactId: string, fields: FieldType[]): Promise<Contact>\n```\n\nReturns a contact matching the input id. Used for gathering precise data about a contact.\n\n**Parameters**\n\n| Name      | Type          | Description                                                                                  |\n| --------- | ------------- | -------------------------------------------------------------------------------------------- |\n| contactId | `string`      | The ID of a system contact.                                                                  |\n| fields    | `FieldType[]` | If available the fields defined will be returned. If `nil` then all fields will be returned. |\n\n**Returns**\n\n| Name    | Type      | Description                               |\n| ------- | --------- | ----------------------------------------- |\n| contact | `Contact` | Contact with an ID matching the input ID. |\n\n**Example**\n\n```js\nconst contact = await Contacts.getContactByIdAsync('161A368D-D614-4A15-8DC6-665FDBCFAE55');\nif (contact) {\n  console.log(contact);\n}\n```\n\n### addContactAsync\n\n> iOS Only - temporary\n\n```js\naddContactAsync(contact: Contact, containerId: string): Promise<string>\n```\n\nCreates a new contact and adds it to the system.\n\n**Parameters**\n\n| Name        | Type      | Description                                                                          |\n| ----------- | --------- | ------------------------------------------------------------------------------------ |\n| contact     | `Contact` | A contact with the changes you wish to persist. The `id` parameter will not be used. |\n| containerId | `string`  | IOS ONLY: The container that will parent the contact                                 |\n\n**Returns**\n\n| Name      | Type     | Description                   |\n| --------- | -------- | ----------------------------- |\n| contactId | `string` | ID of the new system contact. |\n\n**Example**\n\n```js\nconst contact = {\n  [Contacts.Fields.FirstName]: 'Bird',\n  [Contacts.Fields.LastName]: 'Man',\n  [Contacts.Fields.Company]: 'Young Money',\n};\nconst contactId = await Contacts.addContactAsync(contact);\n```\n\n### updateContactAsync\n\n> iOS Only - temporary\n\n```js\nupdateContactAsync(contact: Contact): Promise<string>\n```\n\nMutate the information of an existing contact.\n\n> On Android, you can use `presentFormAsync` to make edits to contacts.\n> Do to an error with the Apple API, `nonGregorianBirthday` cannot be modified.\n\n**Parameters**\n\n| Name    | Type      | Description                                                                           |\n| ------- | --------- | ------------------------------------------------------------------------------------- |\n| contact | `Contact` | A contact with the changes you wish to persist. The contact must contain a vaild `id` |\n\n**Returns**\n\n| Name      | Type     | Description                 |\n| --------- | -------- | --------------------------- |\n| contactId | `string` | The ID of a system contact. |\n\n**Example**\n\n```js\nconst contact = {\n  id: '161A368D-D614-4A15-8DC6-665FDBCFAE55',\n  [Contacts.Fields.FirstName]: 'Drake',\n  [Contacts.Fields.Company]: 'Young Money',\n};\nawait Contacts.updateContactAsync(contact);\n```\n\n### removeContactAsync\n\n> iOS Only - temporary\n\n```js\nremoveContactAsync(contactId: string): Promise<any>\n```\n\nDelete a contact from the system.\n\n**Parameters**\n\n| Name      | Type     | Description                           |\n| --------- | -------- | ------------------------------------- |\n| contactId | `string` | ID of the contact you want to delete. |\n\n**Example**\n\n```js\nawait Contacts.removeContactAsync('161A368D-D614-4A15-8DC6-665FDBCFAE55');\n```\n\n### writeContactToFileAsync\n\n```js\nwriteContactToFileAsync(contactQuery: ContactQuery): Promise<string>\n```\n\nQuery a set of contacts and write them to a local uri that can be used for sharing with `ReactNative.Share`.\n\n**Parameters**\n\n| Name         | Type           | Description                               |\n| ------------ | -------------- | ----------------------------------------- |\n| contactQuery | `ContactQuery` | Used to query contacts you want to write. |\n\n**Returns**\n\n| Name     | Type     | Description         |\n| -------- | -------- | ------------------- |\n| localUri | `string` | Shareable local uri |\n\n**Example**\n\n```js\nconst localUri = await Contacts.writeContactToFileAsync({\n  id: '161A368D-D614-4A15-8DC6-665FDBCFAE55',\n});\nShare.share({ url: localUri, message: 'Call me!' });\n```\n\n---\n\n## IOS Only Functions\n\niOS contacts have a multi-layered grouping system that you can access through this API.\n\n### presentFormAsync\n\n```js\npresentFormAsync(contactId: string, contact: Contact, formOptions: FormOptions): Promise<any>\n```\n\nPresent a native form for manipulating contacts\n\n**Parameters**\n\n| Name        | Type          | Description                                     |\n| ----------- | ------------- | ----------------------------------------------- |\n| contactId   | `string`      | The ID of a system contact.                     |\n| contact     | `Contact`     | A contact with the changes you wish to persist. |\n| formOptions | `FormOptions` | Options for the native editor                   |\n\n**Example**\n\n```js\n// Edit contact\nawait Contacts.presentFormAsync('161A368D-D614-4A15-8DC6-665FDBCFAE55');\n```\n\n### addExistingGroupToContainerAsync\n\n```js\naddExistingGroupToContainerAsync(groupId: string, containerId: string): Promise<any>\n```\n\nAdd a group to a container.\n\n**Parameters**\n\n| Name        | Type     | Description                             |\n| ----------- | -------- | --------------------------------------- |\n| groupId     | `string` | The group you wish to target.           |\n| containerId | `string` | The container you to add membership to. |\n\n**Example**\n\n```js\nawait Contacts.addExistingGroupToContainerAsync(\n  '161A368D-D614-4A15-8DC6-665FDBCFAE55',\n  '665FDBCFAE55-D614-4A15-8DC6-161A368D'\n);\n```\n\n### createGroupAsync\n\n```js\ncreateGroupAsync(groupName: string, containerId?: string): Promise<string>\n```\n\nCreate a group with a name, and add it to a container. If the container is undefined, the default container will be targeted.\n\n**Parameters**\n\n| Name        | Type     | Description                             |\n| ----------- | -------- | --------------------------------------- |\n| name        | `string` | Name of the new group.                  |\n| containerId | `string` | The container you to add membership to. |\n\n**Returns**\n\n| Name    | Type     | Description          |\n| ------- | -------- | -------------------- |\n| groupId | `string` | ID of the new group. |\n\n**Example**\n\n```js\nconst groupId = await Contacts.createGroupAsync('Sailor Moon');\n```\n\n### updateGroupNameAsync\n\n```js\nupdateGroupNameAsync(groupName: string, groupId: string): Promise<any>\n```\n\nChange the name of an existing group.\n\n**Parameters**\n\n| Name      | Type     | Description                        |\n| --------- | -------- | ---------------------------------- |\n| groupName | `string` | New name for an existing group.    |\n| groupId   | `string` | ID for the group you want to edit. |\n\n**Example**\n\n```js\nawait Contacts.updateGroupName('Sailor Moon', '161A368D-D614-4A15-8DC6-665FDBCFAE55');\n```\n\n### removeGroupAsync\n\n```js\nremoveGroupAsync(groupId: string): Promise<any>\n```\n\nDelete a group from the device.\n\n**Parameters**\n\n| Name    | Type     | Description      |\n| ------- | -------- | ---------------- |\n| groupId | `string` | ID of the group. |\n\n**Example**\n\n```js\nawait Contacts.removeGroupAsync('161A368D-D614-4A15-8DC6-665FDBCFAE55');\n```\n\n### addExistingContactToGroupAsync\n\n```js\naddExistingContactToGroupAsync(contactId: string, groupId: string): Promise<any>\n```\n\nAdd a contact as a member to a group. A contact can be a member of multiple groups.\n\n**Parameters**\n\n| Name      | Type     | Description                                     |\n| --------- | -------- | ----------------------------------------------- |\n| contactId | `string` | ID of the contact you want to edit.             |\n| groupId   | `string` | ID for the group you want to add membership to. |\n\n**Example**\n\n```js\nawait Contacts.addExistingContactToGroupAsync(\n  '665FDBCFAE55-D614-4A15-8DC6-161A368D',\n  '161A368D-D614-4A15-8DC6-665FDBCFAE55'\n);\n```\n\n### removeContactFromGroupAsync\n\n```js\nremoveContactFromGroupAsync(contactId: string, groupId: string): Promise<any>\n```\n\nRemove a contact's membership from a given group. This will not delete the contact.\n\n**Parameters**\n\n| Name      | Type     | Description                                        |\n| --------- | -------- | -------------------------------------------------- |\n| contactId | `string` | ID of the contact you want to remove.              |\n| groupId   | `string` | ID for the group you want to remove membership of. |\n\n**Example**\n\n```js\nawait Contacts.removeContactFromGroupAsync(\n  '665FDBCFAE55-D614-4A15-8DC6-161A368D',\n  '161A368D-D614-4A15-8DC6-665FDBCFAE55'\n);\n```\n\n### getGroupsAsync\n\n```js\ngetGroupsAsync(query: GroupQuery): Promise<Group[]>\n```\n\nQuery and return a list of system groups.\n\n**Parameters**\n\n| Name  | Type         | Description                                         |\n| ----- | ------------ | --------------------------------------------------- |\n| query | `GroupQuery` | Information regarding which groups you want to get. |\n\n**Returns**\n\n| Name   | Type      | Description                          |\n| ------ | --------- | ------------------------------------ |\n| groups | `Group[]` | Collection of groups that fit query. |\n\n**Example**\n\n```js\nconst groups = await Contacts.getGroupsAsync({ groupName: 'sailor moon' });\nconst allGroups = await Contacts.getGroupsAsync({});\n```\n\n### getDefaultContainerIdAsync\n\n```js\ngetDefaultContainerIdAsync(): Promise<string>\n```\n\nGet the default container's ID.\n\n**Returns**\n\n| Name        | Type     | Description           |\n| ----------- | -------- | --------------------- |\n| containerId | `string` | Default container ID. |\n\n**Example**\n\n```js\nconst containerId = await Contacts.getDefaultContainerIdAsync();\n```\n\n### getContainersAsync\n\n```js\ngetContainersAsync(containerQuery: ContainerQuery): Promise<Container[]>\n```\n\nQuery a list of system containers.\n\n**Parameters**\n\n| Name           | Type             | Description                            |\n| -------------- | ---------------- | -------------------------------------- |\n| containerQuery | `ContainerQuery` | Information used to gather containers. |\n\n**Returns**\n\n| Name        | Type     | Description                              |\n| ----------- | -------- | ---------------------------------------- |\n| containerId | `string` | Collection of containers that fit query. |\n\n**Example**\n\n```js\nconst allContainers = await getContainersAsync({\n  contactId: '665FDBCFAE55-D614-4A15-8DC6-161A368D',\n});\n```\n\n## Types\n\n### Contact\n\nA set of fields that define information about a single entity.\n\n| Name                    | Type                      | Description                                                    | iOS | Android |\n| ----------------------- | ------------------------- | -------------------------------------------------------------- | --- | ------- |\n| id                      | `string`                  | Immutable identifier used for querying and indexing.           | ✅  | ✅      |\n| name                    | `string`                  | Full name with proper format.                                  | ✅  | ✅      |\n| firstName               | `string`                  | Given name.                                                    | ✅  | ✅      |\n| middleName              | `string`                  | Middle name.                                                   | ✅  | ✅      |\n| lastName                | `string`                  | Family name.                                                   | ✅  | ✅      |\n| maidenName              | `string`                  | Maiden name.                                                   | ✅  | ✅      |\n| namePrefix              | `string`                  | Dr. Mr. Mrs. Ect...                                            | ✅  | ✅      |\n| nameSuffix              | `string`                  | Jr. Sr. Ect...                                                 | ✅  | ✅      |\n| nickname                | `string`                  | An alias to the proper name.                                   | ✅  | ✅      |\n| phoneticFirstName       | `string`                  | Pronunciation of the first name.                               | ✅  | ✅      |\n| phoneticMiddleName      | `string`                  | Pronunciation of the middle name.                              | ✅  | ✅      |\n| phoneticLastName        | `string`                  | Pronunciation of the last name.                                | ✅  | ✅      |\n| company                 | `string`                  | Organization the entity belongs to.                            | ✅  | ✅      |\n| jobTitle                | `string`                  | Job description.                                               | ✅  | ✅      |\n| department              | `string`                  | Job department.                                                | ✅  | ✅      |\n| note                    | `string`                  | Additional information.                                        | ✅  | ✅      |\n| imageAvailable          | `boolean`                 | Used for efficient retrieval of images.                        | ✅  | ✅      |\n| image                   | `Image`                   | Thumbnail image (ios: 320x320)                                 | ✅  | ✅      |\n| rawImage                | `Image`                   | Raw image without cropping, usually large.                     | ✅  | ✅      |\n| contactType             | `ContactType`             | Denoting a person or company.                                  | ✅  | ✅      |\n| birthday                | `Date`                    | Birthday information in JS format.                             | ✅  | ✅      |\n| dates                   | `Date[]`                  | A list of other relevant user dates.                           | ✅  | ✅      |\n| relationships           | `Relationship[]`          | Names of other relevant user connections                       | ✅  | ✅      |\n| emails                  | `Email[]`                 | Email addresses                                                | ✅  | ✅      |\n| phoneNumbers            | `PhoneNumber[]`           | Phone numbers                                                  | ✅  | ✅      |\n| addresses               | `Address[]`               | Locations                                                      | ✅  | ✅      |\n| instantMessageAddresses | `InstantMessageAddress[]` | IM connections                                                 | ✅  | ✅      |\n| urlAddresses            | `UrlAddress[]`            | Web Urls                                                       | ✅  | ✅      |\n| nonGregorianBirthday    | `Date`                    | Birthday that doesn't conform to the Gregorian calendar format | ✅  | ❌      |\n| socialProfiles          | `SocialProfile[]`         | Social networks                                                | ✅  | ❌      |\n| thumbnail               | `Image`                   | Deprecated: Use `image`                                        | ❌  | ❌      |\n| previousLastName        | `string`                  | Deprecated: Use `maidenName`                                   | ❌  | ❌      |\n\n### Group\n\n> iOS Only\n\nA parent to contacts. A contact can belong to multiple groups.\nTo get a group's children you can query with `getContactsAsync({ groupId })`\n\nHere are some different query operations:\n\n- Child Contacts: `getContactsAsync({ groupId })`\n- Groups From Container: `getGroupsAsync({ containerId })`\n- Groups Named: `getContainersAsync({ groupName })`\n\n| Name | Type     | Description                         |\n| ---- | -------- | ----------------------------------- |\n| id   | `string` | Immutable id representing the group |\n| name | `string` | The editable name of a group        |\n\n### Container\n\n> iOS Only\n\nA parent to contacts and groups. You can query the default container with `getDefaultContainerIdAsync()`.\nHere are some different query operations:\n\n- Child Contacts: `getContactsAsync({ containerId })`\n- Child Groups: `getGroupsAsync({ containerId })`\n- Container from Contact: `getContainersAsync({ contactId })`\n- Container from Group: `getContainersAsync({ groupId })`\n- Container from ID: `getContainersAsync({ containerId })`\n\n| Name | Type     | Description                         |\n| ---- | -------- | ----------------------------------- |\n| id   | `string` | Immutable id representing the group |\n| name | `string` | The editable name of a group        |\n\n### Date\n\n| Name   | Type                 | Description                                       |\n| ------ | -------------------- | ------------------------------------------------- |\n| day    | `number`             | Day.                                              |\n| month  | `number`             | Month - adjusted for JS `Date` which starts at 0. |\n| year   | `number`             | Year.                                             |\n| format | `CalendarFormatType` | Format for input date.                            |\n| id     | `string`             | Unique ID.                                        |\n| label  | `string`             | Localized display name.                           |\n\n### Relationship\n\n| Name  | Type     | Description              |\n| ----- | -------- | ------------------------ |\n| name  | `string` | Name of related contact. |\n| id    | `string` | Unique ID.               |\n| label | `string` | Localized display name.  |\n\n### Email\n\n| Name      | Type      | Description             |\n| --------- | --------- | ----------------------- |\n| email     | `string`  | email address.          |\n| isPrimary | `boolean` | Primary email address.  |\n| id        | `string`  | Unique ID.              |\n| label     | `string`  | Localized display name. |\n\n### PhoneNumber\n\n| Name        | Type      | Description                               |\n| ----------- | --------- | ----------------------------------------- |\n| number      | `string`  | Phone number.                             |\n| isPrimary   | `boolean` | Primary phone number.                     |\n| digits      | `string`  | Phone number without format, ex: 8674305. |\n| countryCode | `string`  | Country code, ex: +1.                     |\n| id          | `string`  | Unique ID.                                |\n| label       | `string`  | Localized display name.                   |\n\n### Address\n\n| Name           | Type     | Description                                                       |\n| -------------- | -------- | ----------------------------------------------------------------- |\n| street         | `string` | Street name.                                                      |\n| city           | `string` | City name.                                                        |\n| country        | `string` | Country name.                                                     |\n| region         | `string` | Region or state name.                                             |\n| neighborhood   | `string` | Neighborhood name.                                                |\n| postalCode     | `string` | Local post code.                                                  |\n| poBox          | `string` | P.O. Box.                                                         |\n| isoCountryCode | `string` | [Standard code](https://www.iso.org/iso-3166-country-codes.html). |\n| id             | `string` | Unique ID.                                                        |\n| label          | `string` | Localized display name.                                           |\n\n### SocialProfile\n\n> iOS Only\n\n| Name             | Type     | Description             |\n| ---------------- | -------- | ----------------------- |\n| service          | `string` | Name of social app.     |\n| username         | `string` | Username in social app. |\n| localizedProfile | `string` | Localized name.         |\n| url              | `string` | Web URL.                |\n| userId           | `string` | UID for social app.     |\n| id               | `string` | Unique ID.              |\n| label            | `string` | Localized display name. |\n\n### InstantMessageAddress\n\n| Name             | Type     | Description             |\n| ---------------- | -------- | ----------------------- |\n| service          | `string` | Name of social app.     |\n| username         | `string` | Username in IM app.     |\n| localizedService | `string` | Localized name of app.  |\n| id               | `string` | Unique ID.              |\n| label            | `string` | Localized display name. |\n\n### UrlAddress\n\n| Name  | Type     | Description             |\n| ----- | -------- | ----------------------- |\n| url   | `string` | Web URL                 |\n| id    | `string` | Unique ID.              |\n| label | `string` | Localized display name. |\n\n### Image\n\nInformation regarding thumbnail images.\n\n| Name   | Type     | iOS | Android |\n| ------ | -------- | --- | ------- |\n| uri    | `string` | ✅  | ✅      |\n| width  | `number` | ✅  | ❌      |\n| height | `number` | ✅  | ❌      |\n| base64 | `string` | ✅  | ❌      |\n\n> Android: You can get dimensions using `ReactNative.Image.getSize`. Avoid using Base 64 in React Native\n\n### FormOptions\n\nDenotes the functionality of a native contact form.\n\n| Name                     | Type          | Description                                                                         |\n| ------------------------ | ------------- | ----------------------------------------------------------------------------------- |\n| displayedPropertyKeys    | `FieldType[]` | The properties that will be displayed. iOS: Does nothing in editing mode.           |\n| message                  | `string`      | Controller title.                                                                   |\n| alternateName            | `string`      | Used if contact doesn't have a name defined.                                        |\n| cancelButtonTitle        | `string`      | The name of the left bar button.                                                    |\n| groupId                  | `string`      | The parent group for a new contact.                                                 |\n| allowsEditing            | `boolean`     | Allows for contact mutation.                                                        |\n| allowsActions            | `boolean`     | Actions like share, add, create.                                                    |\n| shouldShowLinkedContacts | `boolean`     | Shows similar contacts.                                                             |\n| isNew                    | `boolean`     | Present the new contact controller - if false the unknown controller will be shown. |\n| preventAnimation         | `boolean`     | Prevents the controller from animating in.                                          |\n\n### ContactQuery\n\nUsed to query contacts from the user's device.\n\n| Name        | Type          | Description                                                                                  | iOS | Android |\n| ----------- | ------------- | -------------------------------------------------------------------------------------------- | --- | ------- |\n| fields      | `FieldType[]` | If available the fields defined will be returned. If `nil` then all fields will be returned. | ✅  | ✅      |\n| pageSize    | `number`      | The max number of contacts to return. If `nil` or `0` then all contacts will be returned.    | ✅  | ✅      |\n| pageOffset  | `number`      | The number of contacts to skip before gathering contacts.                                    | ✅  | ✅      |\n| id          | `string`      | Get contacts with a matching ID .                                                            | ✅  | ✅      |\n| sort        | `SortType`    | Sort method used when gathering contacts.                                                    | ❌  | ✅      |\n| name        | `string`      | Query contacts matching this name.                                                           | ✅  | ❌      |\n| groupId     | `string`      | Get all contacts that belong to the group matching this ID.                                  | ✅  | ❌      |\n| containerId | `string`      | Get all contacts that belong to the container matching this ID.                              | ✅  | ❌      |\n| rawContacts | `boolean`     | Prevent unification of contacts when gathering. Default: `false`.                            | ✅  | ❌      |\n\n### GroupQuery\n\n> iOS Only\n\nUsed to query native contact groups.\n\n| Name        | Type     | Description                                          |\n| ----------- | -------- | ---------------------------------------------------- |\n| groupName   | `string` | Query all groups matching a name.                    |\n| groupId     | `string` | Query the group with a matching ID.                  |\n| containerId | `string` | Query all groups that belong to a certain container. |\n\n### ContainerQuery\n\n> iOS Only\n\nUsed to query native contact containers.\n\n| Name        | Type     | Description                                     |\n| ----------- | -------- | ----------------------------------------------- |\n| contactId   | `string` | Query all the containers that parent a contact. |\n| groupId     | `string` | Query all the containers that parent a group.   |\n| containerId | `string` | Query a container from it's ID.                 |\n\n### ContactResponse\n\nThe return value for queried contact operations like `getContactsAsync`.\n\n| Name            | Type        | Description                                                                       |\n| --------------- | ----------- | --------------------------------------------------------------------------------- |\n| data            | `Contact[]` | An array of contacts that match a particular query.                               |\n| hasNextPage     | `boolean`   | This will be true if there are more contacts to retrieve beyond what is returned. |\n| hasPreviousPage | `boolean`   | true if there are previous contacts that weren't retrieved due to `pageOffset`.   |\n| ~~total~~       | `number`    | **Deprecated:** use `data.length` to get the number of contacts returned.         |\n\n## Constants\n\n### Fields\n\n```js\nconst contactField = Contact.Fields.FirstName;\n```\n\n| Name                    | Value                        | iOS | Android |\n| ----------------------- | ---------------------------- | --- | ------- |\n| ID                      | `'id'`                       | ✅  | ✅      |\n| Name                    | `'name'`                     | ✅  | ✅      |\n| FirstName               | `'firstName'`                | ✅  | ✅      |\n| MiddleName              | `'middleName'`               | ✅  | ✅      |\n| LastName                | `'lastName'`                 | ✅  | ✅      |\n| NamePrefix              | `'namePrefix'`               | ✅  | ✅      |\n| NameSuffix              | `'nameSuffix'`               | ✅  | ✅      |\n| PhoneticFirstName       | `'phoneticFirstName'`        | ✅  | ✅      |\n| PhoneticMiddleName      | `'phoneticMiddleName'`       | ✅  | ✅      |\n| PhoneticLastName        | `'phoneticLastName'`         | ✅  | ✅      |\n| Birthday                | `'birthday'`                 | ✅  | ✅      |\n| Emails                  | `'emails'`                   | ✅  | ✅      |\n| PhoneNumbers            | `'phoneNumbers'`             | ✅  | ✅      |\n| Addresses               | `'addresses'`                | ✅  | ✅      |\n| InstantMessageAddresses | `'instantMessageAddresses'`  | ✅  | ✅      |\n| UrlAddresses            | `'urlAddresses'`             | ✅  | ✅      |\n| Company                 | `'company'`                  | ✅  | ✅      |\n| JobTitle                | `'jobTitle'`                 | ✅  | ✅      |\n| Department              | `'department'`               | ✅  | ✅      |\n| ImageAvailable          | `'imageAvailable'`           | ✅  | ✅      |\n| Image                   | `'image'`                    | ✅  | ✅      |\n| Note                    | `'note'`                     | ✅  | ✅      |\n| Dates                   | `'dates'`                    | ✅  | ✅      |\n| Relationships           | `'relationships'`            | ✅  | ✅      |\n| Nickname                | `'nickname'`                 | ✅  | ✅      |\n| RawImage                | `'rawImage'`                 | ✅  | ✅      |\n| MaidenName              | `'maidenName'`               | ✅  | ✅      |\n| ContactType             | `'contactType'`              | ✅  | ✅      |\n| SocialProfiles          | `'socialProfiles'`           | ✅  | ❌      |\n| NonGregorianBirthday    | `'nonGregorianBirthday'`     | ✅  | ❌      |\n| Thumbnail               | Deprecated: use `Image`      | ❌  | ❌      |\n| PreviousLastName        | Deprecated: use `MaidenName` | ❌  | ❌      |\n\n### FormTypes\n\n```js\nconst formType = Contacts.FormTypes.New;\n```\n\n| Name    | Value       | Description                       |\n| ------- | ----------- | --------------------------------- |\n| New     | `'new'`     | Creating a contact                |\n| Unknown | `'unknown'` | Displaying a contact with actions |\n| Default | `'default'` | Information regarding a contact   |\n\n### ContactTypes\n\n> iOS Only\n\n```js\nconst contactType = Contacts.ContactTypes.Person;\n```\n\n| Name    | Value       | Description                 |\n| ------- | ----------- | --------------------------- |\n| Person  | `'person'`  | Contact is a human          |\n| Company | `'company'` | Contact is group or company |\n\n### SortTypes\n\n```js\nconst sortType = Contacts.SortTypes.FirstName;\n```\n\n| Name        | Value           | Description                           | iOS | Android |\n| ----------- | --------------- | ------------------------------------- | --- | ------- |\n| FirstName   | `'firstName'`   | Sort by first name in ascending order | ✅  | ✅      |\n| LastName    | `'lastName'`    | Sort by last name in ascending order  | ✅  | ✅      |\n| UserDefault | `'userDefault'` | The user default method of sorting    | ✅  | ❌      |\n\n### ContainerTypes\n\n> iOS Only\n\n```js\nconst containerType = Contacts.ContainerTypes.CardDAV;\n```\n\n| Name       | Value          | Description                       |\n| ---------- | -------------- | --------------------------------- |\n| Local      | `'local'`      | A local non-iCloud container      |\n| Exchange   | `'exchange'`   | In association with Email         |\n| CardDAV    | `'cardDAV'`    | cardDAV protocol used for sharing |\n| Unassigned | `'unassigned'` | Unknown                           |\n\n### CalendarFormats\n\n```js\nconst calendarFormat = Contacts.CalendarFormats.Coptic;\n```\n\nThis format denotes the common calendar format used to specify how a date is calculated in `nonGregorianBirthday` fields.\n\n| Constant  | value         | iOS | Android |\n| --------- | ------------- | --- | ------- |\n| Gregorian | `'gregorian'` | ✅  | ✅      |\n| Chinese   | `'chinese'`   | ✅  | ❌      |\n| Hebrew    | `'hebrew'`    | ✅  | ❌      |\n| Islamic   | `'islamic'`   | ✅  | ❌      |\n",
  "readmeFilename": "README.md",
  "version": "2.0.0"
}
