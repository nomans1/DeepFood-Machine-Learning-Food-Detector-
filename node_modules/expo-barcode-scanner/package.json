{
  "_args": [
    [
      {
        "raw": "expo-barcode-scanner@~2.0.0",
        "scope": null,
        "escapedName": "expo-barcode-scanner",
        "name": "expo-barcode-scanner",
        "rawSpec": "~2.0.0",
        "spec": ">=2.0.0 <2.1.0",
        "type": "range"
      },
      "/GCD/Year 4/SDP/RN/MLFoodApp/node_modules/expo"
    ]
  ],
  "_from": "expo-barcode-scanner@~2.0.0",
  "_hasShrinkwrap": false,
  "_id": "expo-barcode-scanner@2.0.0",
  "_location": "/expo-barcode-scanner",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/expo-barcode-scanner_2.0.0_1546598308910_0.7845218068708224"
  },
  "_npmUser": {
    "name": "sjchmiela",
    "email": "sjchmiela@gmail.com"
  },
  "_phantomChildren": {},
  "_requested": {
    "raw": "expo-barcode-scanner@~2.0.0",
    "scope": null,
    "escapedName": "expo-barcode-scanner",
    "name": "expo-barcode-scanner",
    "rawSpec": "~2.0.0",
    "spec": ">=2.0.0 <2.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "/expo"
  ],
  "_resolved": "https://registry.npmjs.org/expo-barcode-scanner/-/expo-barcode-scanner-2.0.0.tgz",
  "_shasum": "0b06c81a4457bc9c1c34f3423acf757dea6ac638",
  "_shrinkwrap": null,
  "_spec": "expo-barcode-scanner@~2.0.0",
  "_where": "/GCD/Year 4/SDP/RN/MLFoodApp/node_modules/expo",
  "author": {
    "name": "650 Industries, Inc."
  },
  "dependencies": {
    "expo-barcode-scanner-interface": "~2.0.0",
    "lodash.mapvalues": "^4.6.0",
    "prop-types": "^15.6.0"
  },
  "description": "Expo BarCode Scanner standalone universal module",
  "devDependencies": {
    "flow-bin": "0.79.1"
  },
  "directories": {},
  "dist": {
    "shasum": "0b06c81a4457bc9c1c34f3423acf757dea6ac638",
    "integrity": "sha512-ryWfpqpw+gzvZVfsm6IUj6oSi22sWeuEg7j38Vn0C9LoHVWNt93JcKWTulO+8Pk2iThvr/ernmHqyMGatwmv6g==",
    "tarball": "https://registry.npmjs.org/expo-barcode-scanner/-/expo-barcode-scanner-2.0.0.tgz",
    "fileCount": 34,
    "unpackedSize": 78557,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcLzelCRA9TVsSAnZWagAAdVsP/3nV/Z6VkOzWACUdVkPC\nzMu53d6ditBpGdCeJNRWC4j7vuO+MwkqO4QVZ0QzWQx4/9NSNfGvevUMjk6W\ntRxpIrKZYdgc2Bjvcv1qP5kTvjzhZbY1l1COrxoIGBdpywzEE4MVcPsoYMcr\nUB5QlQdyAzAmgEo0ufog0aW72xDPcAoyLmnS0xMnat4lffOYV+3oY3QAETvM\nqwyhsdwwWQs4OLFVbgeUadktUbEYfrlc9Ezou91j2blHAmpPoI2qBGCoA+Fe\nxsWkkjm1UkVdTRqk4VpHmh37y55ktRDXkggYq/X/poZz73B+4Ww7A9SauFhQ\nZ2rHiWnn8V0fQ8OibfDUTLL8jaFq63hol/iglKY6VYl+U/4leuX47YOxkY2P\nBLx4bu4uL2LK7GtAAh7lCWyj32T7rrRyJm5tQg/sZVpaSIQn77NfHyDSPGM3\nEg9GDz5hIHO1CphzyUFP4/GH+0x1Xsh+sdC9ralzBHZhestsigsCJxjjNKMc\nNn/yvBAGZH5Wz224ki+tvssCMhdhYVh4N2pdaeFV9V8AR+eyMJKwQECtChgt\nkcdGZg8qJYkjz3SgU/H3qzuJeYnrMg3nVFW93kYJHsNVVIVMECQm+BtN436t\ndq15qZs+b0IEfJAU+RB1rMR2KJsprBebJSrq4YmQprbFnKsFFv61lcy8X8Ch\nmdeE\r\n=+MlY\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "f15abc53c111bd0438cd36dc456c59cfa7c56a58",
  "homepage": "https://docs.expo.io/",
  "keywords": [
    "barcode",
    "barcode-scanner",
    "react-native",
    "expo"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "barthec",
      "email": "bartlomiejbukowski.b@gmail.com"
    },
    {
      "name": "brentvatne",
      "email": "brentvatne@gmail.com"
    },
    {
      "name": "ccheever",
      "email": "ccheever@gmail.com"
    },
    {
      "name": "dsokal",
      "email": "dominiksokal@gmail.com"
    },
    {
      "name": "esamelson",
      "email": "eric@expo.io"
    },
    {
      "name": "evanbacon",
      "email": "baconbrix@gmail.com"
    },
    {
      "name": "expoadmin",
      "email": "support@expo.io"
    },
    {
      "name": "fson",
      "email": "ville.immonen@iki.fi"
    },
    {
      "name": "ide",
      "email": "ide+npm@jameside.com"
    },
    {
      "name": "jakubste",
      "email": "jakub.ste@gmail.com"
    },
    {
      "name": "jesseruder",
      "email": "jesseruder@gmail.com"
    },
    {
      "name": "nikki93",
      "email": "s.nikhilesh@gmail.com"
    },
    {
      "name": "quinlanj",
      "email": "quinlanjung@gmail.com"
    },
    {
      "name": "sjchmiela",
      "email": "sjchmiela@gmail.com"
    },
    {
      "name": "terribleben",
      "email": "ben@exp.host"
    },
    {
      "name": "tsapeta",
      "email": "sapeta.tomasz@gmail.com"
    }
  ],
  "name": "expo-barcode-scanner",
  "optionalDependencies": {},
  "peerDependencies": {
    "expo-core": "~2.0.0"
  },
  "readme": "# expo-barcode-scanner\n\n`expo-barcode-scanner` module allows scanning variety of supported barcodes both as standalone module and as extension for [`expo-camera`](https://github.com/expo/expo-camera). It also allows scanning barcodes from existing images.\n\n## Installation\n\n*If your app is running in [Expo](https://expo.io) then everything is already set up for you, just `import { BarCodeScanner } from 'expo';`*\n\nOtherwise, you need to install the package from `npm` registry.\n\n`yarn add expo-barcode-scanner` or `npm install expo-barcode-scanner` (that would install `expo-barcode-scanner-interface` as well)\n\nAlso, make sure that you have [expo-core](https://github.com/expo/expo-core) and [expo-permissions](https://github.com/expo/expo-permissions) installed, as they are required by `expo-barcode-scanner` to work properly.\n\n### iOS (Cocoapods)\n\nAdd the dependency to your `Podfile`:\n\n```ruby\npod 'EXBarCodeScannerInterface', path: '../node_modules/expo-barcode-scanner-interface/ios'\npod 'EXBarCodeScanner', path: '../node_modules/expo-barcode-scanner/ios'\n```\n\nand run `pod install` under the parent directory of your `Podfile`.\n\n### Android\n\n1.  Append the following lines to `android/settings.gradle`:\n    ```gradle\n    include ':expo-barcode-scanner-interface'\n    project(':expo-barcode-scanner-interface').projectDir = new File(rootProject.projectDir, '../node_modules/expo-barcode-scanner-interface/android')\n    \n    include ':expo-barcode-scanner'\n    project(':expo-barcode-scanner').projectDir = new File(rootProject.projectDir, '../node_modules/expo-barcode-scanner/android')\n    ```\n2.  Insert the following lines inside the dependencies block in `android/app/build.gradle`:\n    ```gradle\n    compile project(':expo-barcode-scanner-interface')\n    compile project(':expo-barcode-scanner')\n    ```\n3.  Add `new BarCodeScannerPackage()` to your module registry provider in `MainApplication.java`.\n\n## Supported formats\n\n| Bar code format | iOS   | Android |\n| --------------- | ----- | ------- |\n| aztec           | Yes   | Yes     |\n| codabar         | No    | Yes     |\n| code39          | Yes   | Yes     |\n| code93          | Yes   | Yes     |\n| code128         | Yes   | Yes     |\n| code138         | Yes   | No      |\n| code39mod43     | Yes   | No      |\n| datamatrix      | Yes   | Yes     |\n| ean13           | Yes   | Yes     |\n| ean8            | Yes   | Yes     |\n| interleaved2of5 | Yes   | No      |\n| itf14           | Yes\\* | Yes     |\n| maxicode        | No    | Yes     |\n| pdf417          | Yes   | Yes     |\n| rss14           | No    | Yes     |\n| rssexpanded     | No    | Yes     |\n| upc_a           | No    | Yes     |\n| upc_e           | Yes   | Yes     |\n| upc_ean         | No    | Yes     |\n| qr              | Yes   | Yes     |\n\n* sometimes when an ITF-14 barcode is recognized it's type is set to `interleaved2of5`.\n\n## Usage\n\nYou must request permission to access the user's camera before attempting to get it. To do this, you will want to use the [Permissions](https://github.com/expo/expo-permissions) API. You can see this in practice in the following example.\n\n```javascript\nimport React from 'react';\nimport { Button, Platform, StyleSheet, Text, View } from 'react-native';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport { Permissions } from 'expo-permissions';\n\nexport default class BarcodeScannerExample extends React.Component {\n  state = {\n    hasPermissionsGranted: null,\n    type: BarCodeScanner.Constants.Type.back,\n  };\n\n  async componentDidMount() {\n    let { status } = await Permissions.askAsync(Permissions.CAMERA);\n    this.setState({ hasPermissionsGranted: (status === 'granted') });\n  }\n\n  render() {\n    const { hasCameraPermission } = this.state;\n    if (hasCameraPermission === null) {\n      return <Text>Requesting for camera permission</Text>;\n    }\n    if (hasCameraPermission === false) {\n      return <Text>No access to camera</Text>;\n    }\n    return (\n      <View style={{ flex: 1 }}>\n        <BarCodeScanner\n          onBarCodeScanned={data => alert(JSON.stringify(data))}\n          barCodeTypes={[\n            BarCodeScanner.Constants.BarCodeType.qr,\n            BarCodeScanner.Constants.BarCodeType.pdf417,\n          ]}\n          type={this.state.type}\n          style={{ ...StyleSheet.absoluteFillObject }}\n        />\n        <TouchableOpacity\n          style={{\n            flex: 0.1,\n            alignSelf: 'flex-end',\n            alignItems: 'center',\n          }}\n          onPress={() => this.setState({ type:\n            this.state.type === BarCodeScanner.Constants.Type.back\n              ? BarCodeScanner.Constants.Type.front\n              : BarCodeScanner.Constants.Type.back,\n          })}\n        >\n          <Text style={{ fontSize: 18, marginBottom: 10, color: 'white' }}> Flip </Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n}\n```\n\n## Props\n\n* **type**\n\nCamera facing. Use one of `BarCodeScanner.Constants.Type`. Use either `Type.front` or `Type.back`. Same as `Camera.Constants.Type`. Default: `Type.back`.\n\n* **barCodeTypes (_Array<BarCodeScanner.Constants.BarCodeType>_)**\n\nAn array of bar code types. Usage: `BarCodeScanner.Constants.BarCodeType.<codeType>` where `codeType` is one of the listed below. Default: all supported bar code types. For example: `barCodeTypes={[BarCodeScanner.Constants.BarCodeType.qr]}`\n\n* **onBarCodeScanned (_function_)**\n\nCallback that is invoked when a bar code has been successfully scanned. The callback is provided with an Object of the shape `{ type: BarCodeScanner.Constants.BarCodeType, data: string }`, where the type refers to the bar code type that was scanned and the data is the information encoded in the bar code (in this case of QR codes, this is often a URL)\n\n## Methods\n\n### `Expo.BarCodeScanner.scanFromURLAsync(url, barCodeTypes)`\n\nScan bar codes from the image given by the URL.\n\n#### Arguments\n\n-   **url (_string_)** -- URL to get the image from.\n-   **barCodeTypes (_Array<BarCodeScanner.Constants.BarCodeType>_)** -- (as in prop) An array of bar code types. Default: all supported bar code types.\n> Note: Only QR codes are supported on iOS.\n\n#### Returns\n\nA possibly empty array of objects of the shape `{ type: BarCodeScanner.Constants.BarCodeType, data: string }`, where the type refers to the bar code type that was scanned and the data is the information encoded in the bar code.\n",
  "readmeFilename": "README.md",
  "version": "2.0.0"
}
