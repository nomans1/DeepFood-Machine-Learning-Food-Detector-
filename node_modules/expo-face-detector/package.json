{
  "_args": [
    [
      {
        "raw": "expo-face-detector@~2.0.0",
        "scope": null,
        "escapedName": "expo-face-detector",
        "name": "expo-face-detector",
        "rawSpec": "~2.0.0",
        "spec": ">=2.0.0 <2.1.0",
        "type": "range"
      },
      "/GCD/Year 4/SDP/RN/MLFoodApp/node_modules/expo"
    ]
  ],
  "_from": "expo-face-detector@~2.0.0",
  "_hasShrinkwrap": false,
  "_id": "expo-face-detector@2.0.0",
  "_location": "/expo-face-detector",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/expo-face-detector_2.0.0_1546598404251_0.0816899166851981"
  },
  "_npmUser": {
    "name": "sjchmiela",
    "email": "sjchmiela@gmail.com"
  },
  "_phantomChildren": {},
  "_requested": {
    "raw": "expo-face-detector@~2.0.0",
    "scope": null,
    "escapedName": "expo-face-detector",
    "name": "expo-face-detector",
    "rawSpec": "~2.0.0",
    "spec": ">=2.0.0 <2.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "/expo"
  ],
  "_resolved": "https://registry.npmjs.org/expo-face-detector/-/expo-face-detector-2.0.0.tgz",
  "_shasum": "d3f96038174d8de47cd0b6a33412ab488dfe7403",
  "_shrinkwrap": null,
  "_spec": "expo-face-detector@~2.0.0",
  "_where": "/GCD/Year 4/SDP/RN/MLFoodApp/node_modules/expo",
  "author": {
    "name": "650 Industries, Inc."
  },
  "dependencies": {
    "expo-core": "~2.0.0",
    "expo-face-detector-interface": "~2.0.0",
    "expo-permissions-interface": "~2.0.0"
  },
  "description": "Expo Face Detector standalone universal module",
  "devDependencies": {
    "babel-preset-expo": "^5.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "d3f96038174d8de47cd0b6a33412ab488dfe7403",
    "integrity": "sha512-w+pO6AURNNZt0ocqHPFHR6EQ2ZyZorSkwRCCZoLLm7GZ1PdMLIRfkqeN1hAWmHcGt9sEzRBaYWJETzDtwSd4BA==",
    "tarball": "https://registry.npmjs.org/expo-face-detector/-/expo-face-detector-2.0.0.tgz",
    "fileCount": 29,
    "unpackedSize": 70897,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcLzgECRA9TVsSAnZWagAAm74QAKRYpTgjVHcCCbILNEFA\nk0QL0dglrWFcDtiPKjr/jLhAI3jtQZcnB39JUrN5+laWnx8raszNzE4RBsRX\nbL4kEZlj5Dy/nk9dWurk0XSMYdsoOiMXMts4e+0v5CLSBlXxpER5iZ2QTYck\n5am743WpYLEEXOlR0+paZZ/Tbpei70UKppP9+ZWx2hAAawa4jUEGXHMiPWLD\n5BCmNFV/r9XY9ZYvJ89rY+uvRsZE5D3y51TyZJcIg1U8DHkX6yRU0yUZ4iwJ\nA6p33LbDXXkC403kn8koo21rF66aHaPEZKMyz2csyB9E7jSMaNi4cLdm9TwM\ncMunOHIt6ezseUFCMIjCtNdOGQRlFfIQWB8s7s/4NOk4QQjZgpZkCMPBeNaq\nuL1OXH2T2tGCO/snEYSq5maVh0rYlGL3vp5bDahyi8SnDGKb3UnlyyGXxdtX\nP/7JaPBoxv/0vLhIqJafsIF44n3NgVN2KEaB+Rd4vlW6NIuLVZnNQ06sRgGN\nu/BwyHHSSW6psAigcYKjH8Uzays4GTc2uWU6cz8ZtfGPKgOhDqGDi8h9cAxv\nIHlBC7o96IAUIGHfjoVZyrcvRx0az19eLw7a4QCv6cpzj2kGf0ScDdArtyIU\nGvp3uWLgdGbQ547ufSw0J2HzCS5O17HODw3IGfLcKC+mtfYJh19Hc0pMeOkA\nyyQJ\r\n=+cDB\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "f15abc53c111bd0438cd36dc456c59cfa7c56a58",
  "homepage": "https://docs.expo.io/",
  "keywords": [
    "react-native",
    "expo",
    "face-detector",
    "face",
    "detection"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "barthec",
      "email": "bartlomiejbukowski.b@gmail.com"
    },
    {
      "name": "brentvatne",
      "email": "brentvatne@gmail.com"
    },
    {
      "name": "ccheever",
      "email": "ccheever@gmail.com"
    },
    {
      "name": "dsokal",
      "email": "dominiksokal@gmail.com"
    },
    {
      "name": "esamelson",
      "email": "eric@expo.io"
    },
    {
      "name": "evanbacon",
      "email": "baconbrix@gmail.com"
    },
    {
      "name": "expoadmin",
      "email": "support@expo.io"
    },
    {
      "name": "fson",
      "email": "ville.immonen@iki.fi"
    },
    {
      "name": "ide",
      "email": "ide+npm@jameside.com"
    },
    {
      "name": "jakubste",
      "email": "jakub.ste@gmail.com"
    },
    {
      "name": "jesseruder",
      "email": "jesseruder@gmail.com"
    },
    {
      "name": "nikki93",
      "email": "s.nikhilesh@gmail.com"
    },
    {
      "name": "quinlanj",
      "email": "quinlanjung@gmail.com"
    },
    {
      "name": "sjchmiela",
      "email": "sjchmiela@gmail.com"
    },
    {
      "name": "terribleben",
      "email": "ben@exp.host"
    },
    {
      "name": "tsapeta",
      "email": "sapeta.tomasz@gmail.com"
    }
  ],
  "name": "expo-face-detector",
  "optionalDependencies": {},
  "readme": "\n# expo-face-detector\n\n## Installation\n\n### iOS (Cocoapods)\n\nIf you're using Cocoapods, add the dependency to your `Podfile`:\n\n`pod 'EXFaceDetector'`\n\nand run `pod install`.\n\n### Android\n\n1.  Append the following lines to `android/settings.gradle`:\n    ```gradle\n    include ':expo-face-detector'\n    project(':expo-face-detector').projectDir = new File(rootProject.projectDir, '../node_modules/expo-face-detector/android')\n\n    include ':expo-face-detector-interface'\n    project(':expo-face-detector-interface').projectDir = new File(rootProject.projectDir, '../node_modules/expo-face-detector-interface/android')\n    ```\n2.  Insert the following lines inside the dependencies block in `android/app/build.gradle`:\n    ```gradle\n    compile project(':expo-face-detector')\n    compile project(':expo-face-detector-interface')\n    ```\n\n## Introduction\n\n`FaceDetector` lets you use the power of [Google Mobile Vision](https://developers.google.com/vision/face-detection-concepts) framework to detect faces on images.\n\n## Known issues\n\n- Android does not recognize faces that aren't aligned with the interface (top of the interface matches top of the head).\n\n## Methods\n\n### `detectFaces`\n\nDetect faces on a picture.\n\n#### Arguments\n\n- **uri (_string_)** -- `file://` URI to the image.\n- **options? (_object_)** -- A map of options:\n  - **mode? (_FaceDetector.Constants.Mode_)** -- Whether to detect faces in fast or accurate mode. Use `FaceDetector.Constants.Mode.{fast, accurate}`.\n  - **detectLandmarks? (_FaceDetector.Constants.Landmarks_)** -- Whether to detect and return landmarks positions on the face (ears, eyes, mouth, cheeks, nose). Use `FaceDetector.Constants.Landmarks.{all, none}`.\n  - **runClassifications? (_FaceDetector.Constants.Classifications_)** -- Whether to run additional classifications on detected faces (smiling probability, open eye probabilities). Use `FaceDetector.Constants.Classifications.{all, none}`.\n\n#### Returns\n\nReturns a Promise that resolves to an object: `{ faces, image }` where `faces` is an array of the detected faces and `image` is an object containing `uri: string` of the image, `width: number` of the image in pixels, `height: number` of the image in pixels and `orientation: number` of the image (value conforms to the EXIF orientation tag standard).\n\n#### Example\n\n```javascript\nimport { FaceDetector } from 'expo-face-detector';\n\n// ...\ndetectFaces = async (imageUri) => {\n  const options = { mode: FaceDetector.Constants.Mode.fast };\n  return await FaceDetector.detectFaces(imageUri, options);\n};\n// ...\n```\n\n##### Detected face schema\n\nA detected face is an object containing at most following fields:\n\n- **bounds (_object_)** -- an object containing:\n  - **origin (`{ x: number, y: number }`)** -- position of the top left corner of a square containing the face in image coordinates,\n  - **size (`{ width: number, height: number }`)** -- size of the square containing the face in image coordinates,\n- **rollAngle (_number_)** -- roll angle of the face (bank),\n- **yawAngle (_number_)** -- yaw angle of the face (heading, turning head left or right),\n- **smilingProbability (_number_)** -- probability that the face is smiling,\n- **leftEarPosition (`{ x: number, y: number}`)** -- position of the left ear in image coordinates,\n- **rightEarPosition (`{ x: number, y: number}`)** -- position of the right ear in image coordinates,\n- **leftEyePosition (`{ x: number, y: number}`)** -- position of the left eye in image coordinates,\n- **leftEyeOpenProbability (_number_)** -- probability that the left eye is open,\n- **rightEyePosition (`{ x: number, y: number}`)** -- position of the right eye in image coordinates,\n- **rightEyeOpenProbability (_number_)** -- probability that the right eye is open,\n- **leftCheekPosition (`{ x: number, y: number}`)** -- position of the left cheek in image coordinates,\n- **rightCheekPosition (`{ x: number, y: number}`)** -- position of the right cheek in image coordinates,\n- **mouthPosition (`{ x: number, y: number}`)** -- position of the center of the mouth in image coordinates,\n- **leftMouthPosition (`{ x: number, y: number}`)** -- position of the left edge of the mouth in image coordinates,\n- **rightMouthPosition (`{ x: number, y: number}`)** -- position of the right edge of the mouth in image coordinates,\n- **noseBasePosition (`{ x: number, y: number}`)** -- position of the nose base in image coordinates.\n\n`smilingProbability`, `leftEyeOpenProbability` and `rightEyeOpenProbability` are returned only if `runClassifications` option is set to `.all`.\n\nPositions of face landmarks are returned only if `detectLandmarks` option is set to `.all`.\n",
  "readmeFilename": "README.md",
  "version": "2.0.0"
}
