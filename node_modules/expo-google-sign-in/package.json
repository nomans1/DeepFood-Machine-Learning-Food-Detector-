{
  "_args": [
    [
      {
        "raw": "expo-google-sign-in@~2.0.0",
        "scope": null,
        "escapedName": "expo-google-sign-in",
        "name": "expo-google-sign-in",
        "rawSpec": "~2.0.0",
        "spec": ">=2.0.0 <2.1.0",
        "type": "range"
      },
      "/GCD/Year 4/SDP/RN/MLFoodApp/node_modules/expo"
    ]
  ],
  "_from": "expo-google-sign-in@~2.0.0",
  "_hasShrinkwrap": false,
  "_id": "expo-google-sign-in@2.0.0",
  "_location": "/expo-google-sign-in",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/expo-google-sign-in_2.0.0_1546598597530_0.6364903406048597"
  },
  "_npmUser": {
    "name": "sjchmiela",
    "email": "sjchmiela@gmail.com"
  },
  "_phantomChildren": {},
  "_requested": {
    "raw": "expo-google-sign-in@~2.0.0",
    "scope": null,
    "escapedName": "expo-google-sign-in",
    "name": "expo-google-sign-in",
    "rawSpec": "~2.0.0",
    "spec": ">=2.0.0 <2.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "/expo"
  ],
  "_resolved": "https://registry.npmjs.org/expo-google-sign-in/-/expo-google-sign-in-2.0.0.tgz",
  "_shasum": "f3352300b3f1f8625f5a2835b28910edd61e31db",
  "_shrinkwrap": null,
  "_spec": "expo-google-sign-in@~2.0.0",
  "_where": "/GCD/Year 4/SDP/RN/MLFoodApp/node_modules/expo",
  "author": {
    "name": "650 Industries, Inc."
  },
  "contributors": [
    {
      "name": "Evan Bacon",
      "email": "bacon@expo.io",
      "url": "https://github.com/evanbacon"
    }
  ],
  "dependencies": {
    "expo-errors": "~1.0.0",
    "invariant": "^2.2.4"
  },
  "description": "Expo Unimodule for interfacing with the native GoogleSignIn library.",
  "devDependencies": {
    "babel-preset-expo": "^5.0.0",
    "flow-bin": "^0.77.0"
  },
  "directories": {},
  "dist": {
    "shasum": "f3352300b3f1f8625f5a2835b28910edd61e31db",
    "integrity": "sha512-2uuHbKQov4e+oITVBj/TyUhGqyP2hCEGRMqzHc1POb47z7J3yfVordAxdost4sazrWkWRrOHMAJp6Xah38d5pQ==",
    "tarball": "https://registry.npmjs.org/expo-google-sign-in/-/expo-google-sign-in-2.0.0.tgz",
    "fileCount": 25,
    "unpackedSize": 101055,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcLzjGCRA9TVsSAnZWagAA+OUQAJ/fhoyqQHcqx4T6CRAI\nlpvG8Dz1OoJDMIFtSNnsprupw31IC7Kp027KJM/Rjqpz4L/p/sVDgIc0pNCf\noaLW7jFd+RYg3SR7040eb5vZHhh/+/mBILvioQtrGbsGP+Xx2SdEjdk5MILa\nJStIe7n5MPcO8sasKGeDUU0snro8gfz8vMSvl41bLXA1LXsLsLBSa9GzWeHX\nhoOlA7i6akPZMhCMxsNCHFfaixmCrAPv3RN4Gy7Nm/02M0D1k6nOrTjMJ94j\nHuvYSdvs3xuCJlWh5UtWFzw8xE7qMT2YMwDzR8+M2ioGF7PPPLxHUe94vORS\ngDEV54rpTmEQfeAylweH2s7g8tIt5p0YgIiujkYXiWJsTk2ZEIb7nQwIso5o\n1MWlrQ/ATMqtVBIGFnVBMFwSqlXWbrxTD00zqAwKKEeX3kFzhVwIWGZrqgOf\nAUG0v0lyK72bdTqywk4QxIw189bER64t+cIEjsBL5Z/amtVmStVW2G7AHqdO\nOKK3SqzvyewyIaddL+fKq045Lf8WvO087906ljmP/pagmuXN4rb7CIWXKWky\ntAhNrMFP3TuL8FE/lq0sDMiUG5CkKkUWqdWa7lbSDsY8YDj3M89OfzX6SFTb\nsQVjoRT/w7PUEhmxCO6/xK+d2c8F67QpCvH7FouKn47uACZHRKRCWYQL587s\nfGLV\r\n=QI0M\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "f15abc53c111bd0438cd36dc456c59cfa7c56a58",
  "homepage": "https://docs.expo.io/",
  "keywords": [
    "react-native",
    "expo",
    "google",
    "firebase",
    "auth",
    "sign-in",
    "oauth"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "barthec",
      "email": "bartlomiejbukowski.b@gmail.com"
    },
    {
      "name": "brentvatne",
      "email": "brentvatne@gmail.com"
    },
    {
      "name": "ccheever",
      "email": "ccheever@gmail.com"
    },
    {
      "name": "dsokal",
      "email": "dominiksokal@gmail.com"
    },
    {
      "name": "esamelson",
      "email": "eric@expo.io"
    },
    {
      "name": "evanbacon",
      "email": "baconbrix@gmail.com"
    },
    {
      "name": "expoadmin",
      "email": "support@expo.io"
    },
    {
      "name": "fson",
      "email": "ville.immonen@iki.fi"
    },
    {
      "name": "ide",
      "email": "ide+npm@jameside.com"
    },
    {
      "name": "jakubste",
      "email": "jakub.ste@gmail.com"
    },
    {
      "name": "jesseruder",
      "email": "jesseruder@gmail.com"
    },
    {
      "name": "nikki93",
      "email": "s.nikhilesh@gmail.com"
    },
    {
      "name": "quinlanj",
      "email": "quinlanjung@gmail.com"
    },
    {
      "name": "sjchmiela",
      "email": "sjchmiela@gmail.com"
    },
    {
      "name": "terribleben",
      "email": "ben@exp.host"
    },
    {
      "name": "tsapeta",
      "email": "sapeta.tomasz@gmail.com"
    }
  ],
  "name": "expo-google-sign-in",
  "optionalDependencies": {},
  "peerDependencies": {
    "react-native": "^0.55.4",
    "expo-constants": "~2.0.0",
    "expo-core": "~2.0.0"
  },
  "readme": "# expo-google-sign-in\n\n> This library is a part of Expo v32+ but cannot be used in the Expo Client\n\n`expo-google-sign-in` enables native Google authentication features in your app!\nThis module can only be used in ExpoKit, or a Standalone Expo app.\n\n## Installation\n\nYou need to install the package from `npm` registry.\n\n`npm install expo-google-sign-in` or `yarn add expo-google-sign-in`\n\n#### iOS\n\nIf you're using Cocoapods, add the dependency to your `Podfile`:\n\n```ruby\npod 'EXGoogleSignIn', path: '../node_modules/expo-google-sign-in/ios'\n```\n\nand run `pod install`.\n\nThe `clientId` of the app from the Google APIs (or Firebase) console, must be set in `GoogleSignIn.initAsync({ clientId: <CLIENT_ID> })` for sign-in to work. Normally this value would be defined at build time in the `GoogleService-info.plist`.\n\nYou will also need to define a custom URL scheme for `Google Sign-In` to handle the returned data.\n\n**If this step is skipped you should see an error: `\"Exception 'Your app is missing support for the following URL schemes: com.googleusercontent.apps.{{CLIENT_ID}}' ...`**\n\nThis can be done in the app.json, the value should be your `REVERSED_CLIENT_ID` iOS:\n\n```js\n{\n ...\n \"ios\": {\n   \"infoPlist\": {\n     \"CFBundleURLTypes\": [{\n     \"CFBundleTypeRole\": \"Editor\",\n     \"CFBundleURLName\": \"Google Auth\",\n     \"CFBundleURLSchemes\": [\n       \"firebase.reverse.id\" // ex: \"com.googleusercontent.apps.603386649315-vp4revvrcgrcjme51ebuhbkbspl048l9\"\n      ]\n    }]\n  }\n}\n```\n\n#### Android\n\n1.  Append the following lines to `android/settings.gradle`:\n\n    ```gradle\n    include ':expo-core'\n    project(':expo-core').projectDir = new File(rootProject.projectDir, '../node_modules/expo-core/android')\n\n    include ':expo-google-sign-in'\n    project(':expo-google-sign-in').projectDir = new File(rootProject.projectDir, '../node_modules/expo-google-sign-in/android')\n    ```\n\n2.  Insert the following lines inside the dependencies block in `android/app/build.gradle`:\n\n    ```gradle\n    api project(':expo-core')\n\n    api project(':expo-google-sign-in')\n    ```\n\n3.  In order to access this module from Expo, you will need to include it in the `expoPackages` export:\n    `./android/app/src/main/java/host/exp/exponent/MainActivity.java`\n    ```java\n    @Override\n    public List<Package> expoPackages() {\n        // Here you can add your own packages.\n        return Arrays.<Package>asList(\n            new GoogleSignInPackage() // Include this.\n        );\n    }\n    ```\n4.  The client ID of the app from the Google APIs (or Firebase) console, must be set for sign-in to work. This value must be defined in the `google-services.json` on Android, you can define include your custom `google-services.json` in the `app.json` before creating a Standalone app like so:\n    ```json\n    {\n     ...\n     \"android\": {\n       \"googleServicesFile\": \"./google-services.json\",\n       ...\n      }\n    }\n    ```\n\n## Methods\n\n### `getPlayServiceAvailability(shouldAsk: boolean = false): Promise<boolean>`\n\n> Android Only, this method always returns true on iOS\n\nUse this method to determine if a user's device can utilize Google Sign-In functionality.\nBy default this method will assume the option is `false` and silently check the play services, whereas passing `true` will present a modal if the Play Services aren't available.\n\n### `askForPlayServicesAsync(): Promise<boolean>`\n\n> Android Only, this method always returns true on iOS\n\nA convenience wrapper for `getPlayServiceAvailability(true)`, this method will present a modal for the user to update Play Services if they aren't already up-to-date.\n\nReturns true after the user successfully updates.\n\n### `initAsync(options: ?GoogleSignInOptions): Promise`\n\nConfigures how the `GoogleSignIn` module will attempt to sign-in. You can call this method multiple times.\n\nSee all the available options under the `GoogleSignInOptions` type.\n\n### `isSignedInAsync(): Promise<boolean>`\n\nAsynchronously returns a boolean representing the user's authentication status.\n\n### `signInSilentlyAsync(): Promise<?GoogleUser>`\n\nThis method will attempt to reauthenticate the user without initializing the authentication flow. If the method is successful, the currently authenticated `GoogleUser` will be returned, otherwise the method will return `null`.\n\n### `signInAsync(): Promise<?GoogleSignInAuthResult>`\n\nStarts the native authentication flow with the information provided in `initAsync()`.\nIf a user cancels, the method will return `{ type: 'cancel', user: null }`. However if a user successfully finishes the authentication flow, the returned value will be: `{ type: 'success', user: GoogleUser }`.\n\nThere are some errors that can be thrown while authenticating, check `GoogleSignIn.ERRORS` for available error codes.\n\n### `signOutAsync(): Promise`\n\nSigns-out the currently authenticated user. Unlike `disconnectAsync()`, this method will not revoke the access token. This means you can specifiy the `accountName` and reauthenticate without extra user approval.\n\n### `isConnectedAsync(): Promise<boolean>`\n\nReturns true if a user is authenticated and the access token has not been invalidated.\n\n### `disconnectAsync(): Promise`\n\nSigns-out the current user out and revokes the access tokens associated with the account. This will prevent reauthentication, whereas `signOutAsync()` will not.\n\n### `getCurrentUserAsync(): Promise<GoogleUser | null>`\n\nIf a user is authenticated, this method will return all the basic profile information in the form of a `GoogleUser`.\n\n### `getCurrentUser(): GoogleUser | null`\n\nGet the most recent instance of the authenticated `GoogleUser`.\n\n### `getPhotoAsync(size: number = 128): Promise<?string>`\n\nReturns an image URI for the currently authenticated user. This method will return `null` if no user is signed in, or if the current user doesn't have a profile image on Google.\nThe default size is `128px`, if the requested image size is larger than the original image size, the full sized image will be returned.\n\n## Types\n\n```js\n/* Android Only */\ntype GoogleSignInType = 'default' | 'games';\n```\n\n```js\ntype GoogleSignInOptions = {\n  /*\n   * [iOS][Android][optional]: `accountName: ?string`\n   * [default]: `[GoogleSignIn.SCOPES.PROFILE, GoogleSignIn.SCOPES.EMAIL]`\n   * Pass the scopes you wish to have access to.\n   */\n  scopes: ?Array<string>,\n\n  /*\n   * [iOS][Android][optional]: `webClientId: ?string`\n   * [default]: `undefined`\n   * The client ID of the home web server.  This will be returned as the |audience| property of the\n   * OpenID Connect ID token.  For more info on the ID token:\n   * https://developers.google.com/identity/sign-in/ios/backend-auth\n   */\n  webClientId: ?string,\n\n  /*\n   * [iOS][Android][optional]: `hostedDomain: ?string`\n   * [default]: `undefined`\n   * The hosted G Suite domain of the user. Provided only if the user belongs to a hosted domain\n   */\n  hostedDomain: ?string,\n\n  /*\n   * [iOS][Android][optional]: `accountName: ?string`\n   * [default]: `undefined`\n   * If you know the user's email address ahead of time, you can add it here and it will be the default option\n   * if the user has approved access for this app, the Auth will return instantly.\n   */\n  accountName: ?string,\n\n  /*\n   * [Android][optional]: `signInType?: GoogleSignIn.TYPES.DEFAULT | GoogleSignIn.TYPES.GAMES`\n   * [default]: `undefined`\n   * The service you wish to sign-in to\n   * GoogleSignIn.TYPES.DEFAULT | GoogleSignIn.TYPES.GAMES\n   */\n  signInType: ?GoogleSignInType,\n\n  /*\n   * [Android][optional]: `isOfflineEnabled: ?boolean`\n   * [default]: `undefined`\n   * If true, the server will return refresh tokens that can be used to access data when the user has unauthenticated.\n   * 1. Safely secure the refresh token as you can only get one during the initial auth flow.\n   * 2. There are only so many refresh tokens that are issued, limit per user/app, you can also get one for a single user across all clients in an app. If you requests too many tokens, older tokens will begin to be invalidated.\n   */\n  isOfflineEnabled: ?boolean,\n\n  /*\n   * [Android][optional]: `isPromptEnabled: ?boolean`\n   * [default]: false\n   * Forces the consent prompt to be shown everytime a user authenticates. Enable this only when necessary.\n   */\n  isPromptEnabled: ?boolean,\n\n  /*\n   * [iOS][optional]: `clientId: ?string`\n   * [default]: Read from GoogleService-info.plist `CLIENT_ID` on iOS, and google-services.json `oauth_client.client_id` on Android.\n   * The client ID of the app from the Google APIs (or Firebase) console, this must be set for sign-in to work.\n   * This value must be defined in the google-services.json on Android, you can define your custom google-services.json\n   */\n  clientId: ?string,\n\n  /*\n   * [iOS][optional]: `language: ?string`\n   * [default]: `undefined`\n   * The language for sign-in, in the form of ISO 639-1 language code optionally followed by a dash\n   * and ISO 3166-1 alpha-2 region code, such as |@\"it\"| or |@\"pt-PT\"|. Only set if different from\n   * system default.\n   */\n  language: ?string,\n\n  /*\n   * [iOS][optional]: `openIdRealm?: ?string`\n   * [default]: `undefined`\n   * The OpenID2 realm of the home web server. This allows Google to include the user's OpenID\n   * Identifier in the OpenID Connect ID token..\n   */\n  openIdRealm: ?string,\n};\n```\n\n```js\ntype GoogleSignInAuthResultType = 'success' | 'cancel';\n```\n\n```js\ntype GoogleSignInAuthResult = {\n  type: GoogleSignInAuthResultType,\n  user: ?User,\n};\n```\n\n## Classes\n\n### `GoogleAuthData`\n\nThe base class for `GoogleSignIn` authentication data. This method enables you to compare and serialize objects.\n\n**Methods:**\n\n- `equals(other: ?any): boolean`\n- `toJSON(): object`\n\n### `GoogleIdentity`\n\nExtends `GoogleAuthData`, core management of user data.\n\n**Variables:**\n\n- `uid: string;`\n- `email: string;`\n- `displayName: ?string;`\n- `photoURL: ?string;`\n- `firstName: ?string;`\n- `lastName: ?string;`\n\n### `GoogleUser`\n\nExtends `GoogleIdentity`, manaages all data regarding an authenticated user.\n\n**Variables:**\n\n- `auth: ?Authentication;`\n- `scopes: Array<string>;`\n- `hostedDomain: ?string;`\n- `serverAuthCode: ?string;`\n\n**Methods:**\n\n- `clearCache(): void`\n- `getHeaders(): Promise<{ [string]: string }>`\n- `refreshAuth(): Promise<?GoogleAuthentication>`\n\n### `GoogleAuthentication`\n\nExtends `GoogleAuthData`, manages the user tokens.\n\n**Variables:**\n\n- `clientId: ?string;`\n- `accessToken: ?string;`\n- `accessTokenExpirationDate: ?number;`\n- `refreshToken: ?string;`\n- `idToken: ?string;`\n- `idTokenExpirationDate: ?number;`\n\n## Constants\n\n### `GoogleSignIn.ERRORS`\n\nAll of the available authentication error codes.\n\n- `GoogleSignIn.ERRORS.SIGN_IN_CANCELLED` The user has cancelled the auth flow\n- `GoogleSignIn.ERRORS.SIGN_IN_REQUIRED` Attempting to access user data before any user has been authenticated\n- `GoogleSignIn.ERRORS.TASK_IN_PROGRESS` An existing auth task is already running.\n- `GoogleSignIn.ERRORS.SIGN_IN_EXCEPTION` A general error has occurred\n- `GoogleSignIn.ERRORS.SIGN_IN_FAILED` A Play Services error has occured (Android only)\n- `GoogleSignIn.ERRORS.INVALID_ACCOUNT` An invalid account has been provided with `accountName` (Android only)\n- `GoogleSignIn.ERRORS.SIGN_IN_NETWORK_ERROR` An issue with the internet connection has caused the auth task to fail (Android only)\n\n### `GoogleSignIn.SCOPES`\n\n- `GoogleSignIn.SCOPES.PROFILE`\n- `GoogleSignIn.SCOPES.EMAIL`\n- `GoogleSignIn.SCOPES.OPEN_ID`\n- `GoogleSignIn.SCOPES.PLUS_ME`\n- `GoogleSignIn.SCOPES.GAMES`\n- `GoogleSignIn.SCOPES.GAMES_LITE`\n- `GoogleSignIn.SCOPES.CLOUD_SAVE`\n- `GoogleSignIn.SCOPES.APP_STATE`\n- `GoogleSignIn.SCOPES.DRIVE_FILE`\n- `GoogleSignIn.SCOPES.DRIVE_APPFOLDER`\n- `GoogleSignIn.SCOPES.DRIVE_FULL`\n- `GoogleSignIn.SCOPES.DRIVE_APPS`\n- `GoogleSignIn.SCOPES.FITNESS_ACTIVITY_READ`\n- `GoogleSignIn.SCOPES.FITNESS_ACTIVITY_READ_WRITE`\n- `GoogleSignIn.SCOPES.FITNESS_LOCATION_READ`\n- `GoogleSignIn.SCOPES.FITNESS_LOCATION_READ_WRITE`\n- `GoogleSignIn.SCOPES.FITNESS_BODY_READ`\n- `GoogleSignIn.SCOPES.FITNESS_BODY_READ_WRITE`\n- `GoogleSignIn.SCOPES.FITNESS_NUTRITION_READ`\n- `GoogleSignIn.SCOPES.FITNESS_NUTRITION_READ_WRITE`\n- `GoogleSignIn.SCOPES.FITNESS_BLOOD_PRESSURE_READ`\n- `GoogleSignIn.SCOPES.FITNESS_BLOOD_PRESSURE_READ_WRITE`\n- `GoogleSignIn.SCOPES.FITNESS_BLOOD_GLUCOSE_READ`\n- `GoogleSignIn.SCOPES.FITNESS_BLOOD_GLUCOSE_READ_WRITE`\n- `GoogleSignIn.SCOPES.FITNESS_OXYGEN_SATURATION_READ`\n- `GoogleSignIn.SCOPES.FITNESS_OXYGEN_SATURATION_READ_WRITE`\n- `GoogleSignIn.SCOPES.FITNESS_BODY_TEMPERATURE_READ`\n- `GoogleSignIn.SCOPES.FITNESS_BODY_TEMPERATURE_READ_WRITE`\n- `GoogleSignIn.SCOPES.FITNESS_REPRODUCTIVE_HEALTH_READ`\n- `GoogleSignIn.SCOPES.FITNESS_REPRODUCTIVE_HEALTH_READ_WRITE`\n\n### `GoogleSignIn.TYPES`\n\nAll of the available sign-in types.\n\n- `GoogleSignIn.TYPES.DEFAULT` The standard login method.\n- `GoogleSignIn.TYPES.GAMES` Sign-in to Google Play Games (Android only)\n\n## Usage\n\n```javascript\nimport React from 'react';\nimport { View } from 'react-native';\nimport { GoogleSignIn } from 'expo-google-sign-in';\n\nexport default class AuthScreen extends React.Component {\n  initAsync = async () => {\n    await GoogleSignIn.initAsync({\n      clientId: '603386649315-vp4revvrcgrcjme51ebuhbkbspl048l9.apps.googleusercontent.com',\n    });\n    this._syncUserWithStateAsync();\n  };\n\n  _syncUserWithStateAsync = async () => {\n    const user = await GoogleSignIn.signInSilentlyAsync();\n    this.setState({ user });\n  };\n\n  signOutAsync = async () => {\n    await GoogleSignIn.signOutAsync();\n    this.setState({ user: null });\n  };\n\n  signInAsync = async () => {\n    try {\n      await GoogleSignIn.askForPlayServicesAsync();\n      const { type, user } = await GoogleSignIn.signInAsync();\n      if (type === 'success') {\n        this._syncUserWithStateAsync();\n      }\n    } catch ({ message }) {\n      alert('login: Error:' + message);\n    }\n  };\n\n  render() {\n    return <View />;\n  }\n}\n```\n",
  "readmeFilename": "README.md",
  "version": "2.0.0"
}
